/*
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium'
import { BigNumber } from './BigNumber';
import Test from './tester';
import Utils from './Utils';

export default function exponentiatedBy() {
  describe('exponentiatedBytest', ()=> {

    let t = (expected:string |BigNumber.Format| boolean |(() => BigNumber)|number|BigNumber|Function, n: BigNumber.Value, exp:number|BigNumber.Value|string)=> {
      new Test().areEqual(expected, new BigNumber(n).exponentiatedBy(exp).valueOf());
    };

    let tb = (expected:string |BigNumber.Format| boolean |(() => BigNumber)|number|BigNumber|Function, n: BigNumber.Value, exp:number|BigNumber.Value|string, mod: BigNumber.Value)=> {
      new Test().areEqual(expected, new BigNumber(n).exponentiatedBy(exp, mod).valueOf());
    };

    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(()=> {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(()=> {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(()=> {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(()=> {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('exponentiatedBy', 0, ()=> {

      new Test().areEqual(Utils.exponentiatedBy, Utils.pow);

      BigNumber.config({
        POW_PRECISION: 0,
        DECIMAL_PLACES: 20,
        ROUNDING_MODE: 4,
        RANGE: 1E9,
        EXPONENTIAL_AT: [-7, 21]
      });

      t('2', 2, 1);
      t('4', 2, 2);
      t('8', 2, 3);
      t('16', 2, 4);
      t('2048', 2, 11);
      t('2147483648', 2, 31);
      t('0.25', 2, -2);
      t('0.0625', 2, -4);
      t('1', 1, 100);
      t('0', 0, 1000);
      t('27', 3, 3);
      t('0.0625', 0.5, 4);
      t('0.0625', 2, -4);

      // 0
      t('1', 0, +0);
      t('1', 0, -0);
      t('0', 0, 1);
      t('0', 0, 2);
      t('Infinity', 0, -1);
      t('Infinity', 0, -2);
      t('NaN', 0, Number.NaN);
      t('0', 0, Number.POSITIVE_INFINITY);
      t('Infinity', 0, Number.NEGATIVE_INFINITY);
      t('Infinity', 0, '-123456789012345');
      t('0', 0, '-12345678901234567890123456789012345678901234567890');

      //-0
      t('1', -0, +0);
      t('1', -0, -0);
      t('-0', -0, 1);
      t('0', -0, 2);
      t('-Infinity', -0, -1);
      t('Infinity', -0, -2);
      t('NaN', -0, Number.NaN);
      t('0', -0, Number.POSITIVE_INFINITY);
      t('Infinity', -0, Number.NEGATIVE_INFINITY);
      t('-Infinity', -0, '-123456789012345');
      t('0', -0, '-12345678901234567890123456789012345678901234567890');

      // 1
      t('1', 1, +0);
      t('1', 1, -0);
      t('1', 1, 1);
      t('1', 1, 2);
      t('1', 1, -1);
      t('1', 1, -2);
      t('NaN', 1, Number.NaN);
      t('NaN', 1, Number.POSITIVE_INFINITY);
      t('NaN', 1, Number.NEGATIVE_INFINITY);

      // 2
      t('1', 2, +0);
      t('1', 2, -0);
      t('2', 2, 1);
      t('4', 2, 2);
      t('0.5', 2, -1);
      t('0.25', 2, -2);
      t('NaN', 2, Number.NaN);
      t('Infinity', 2, Number.POSITIVE_INFINITY);
      t('0', 2, Number.NEGATIVE_INFINITY);

      // -1
      t('1', -1, +0);
      t('1', -1, -0);
      t('-1', -1, 1);
      t('1', -1, 2);
      t('-1', -1, -1);
      t('1', -1, -2);
      t('NaN', -1, Number.NaN);
      t('NaN', -1, Number.POSITIVE_INFINITY);
      t('NaN', -1, Number.NEGATIVE_INFINITY);

      // -2
      t('1', -2, +0);
      t('1', -2, -0);
      t('-2', -2, 1);
      t('4', -2, 2);
      t('-0.5', -2, -1);
      t('0.25', -2, -2);
      t('NaN', -2, Number.NaN);
      t('Infinity', -2, Number.POSITIVE_INFINITY);
      t('0', -2, Number.NEGATIVE_INFINITY);

      // Number.NaN
      t('1', Number.NaN, +0);
      t('1', Number.NaN, -0);
      t('NaN', Number.NaN, 1);
      t('NaN', Number.NaN, 2);
      t('NaN', Number.NaN, -1);
      t('NaN', Number.NaN, -2);
      t('NaN', Number.NaN, Number.NaN);
      t('NaN', Number.NaN, Number.POSITIVE_INFINITY);
      t('NaN', Number.NaN, Number.NEGATIVE_INFINITY);

      // Number.POSITIVE_INFINITY
      t('1', Number.POSITIVE_INFINITY, +0);
      t('1', Number.POSITIVE_INFINITY, -0);
      t('Infinity', Number.POSITIVE_INFINITY, 1);
      t('Infinity', Number.POSITIVE_INFINITY, 2);
      t('0', Number.POSITIVE_INFINITY, -1);
      t('0', Number.POSITIVE_INFINITY, -2);
      t('NaN', Number.POSITIVE_INFINITY, Number.NaN);
      t('Infinity', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      t('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // Number.NEGATIVE_INFINITY
      t('1', Number.NEGATIVE_INFINITY, +0);
      t('1', Number.NEGATIVE_INFINITY, -0);
      t('-Infinity', Number.NEGATIVE_INFINITY, 1);
      t('Infinity', Number.NEGATIVE_INFINITY, 2);
      t('-0', Number.NEGATIVE_INFINITY, -1);
      t('0', Number.NEGATIVE_INFINITY, -2);
      t('NaN', Number.NEGATIVE_INFINITY, Number.NaN);
      t('Infinity', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);
      t('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      t('4096', '8', 4);
      t('-1.331', '-1.1', 3);
      t('5.125696', '-2.264', 2);
      t('6.7266e-7', '6.7266E-7', 1);
      t('1', '-1', 8);
      t('4142779.6499215776', '21.06', 5);
      t('731.1616', '-5.2', 4);
      t('1', '61818', 0);
      t('3.2', '3.2', 1);
      t('5.4139923025768140625e-41', '-1.945E-7', 6);
      t('1280630.81718016', '5.8', 8);
      t('3965.318943552', '15.828', 3);
      t('53.721', '53.721', 1);
      t('1', '-1.9', 0);
      t('4.58357323731267363492522744606954913014016e-39', '-0.0000161306', 8);
      t('-8560814308.6108448224', '-96.94', 5);
      t('4.4127502627834341562081e-74', '-6.77E-10', 8);
      t('79327261142.56790234534719652175488087744161', '23.0371', 8);
      t('3.101121e-38', '1.761E-19', 2);
      t('1', '-1', 4);
      t('6.23201296e-28', '-1.58E-7', 4);
      t('-8.50893402176e-19', '-9.476E-7', 3);
      t('16', '4', 2);
      t('90368789.0625', '-97.5', 4);
      t('1', '-112.8', 0);
      t('4.122181458338334221291398681640625e+27', '40042.5', 6);
      t('5.94467302491009e+21', '1290.0', 7);
      t('5.6599836943004175019970957e+25', '141437', 5);
      t('9', '3', 2);
      t('69.75757441', '1.7', 8);
      t('1e-42', '0.0000010', 7);
      t('8', '8', 1);
      t('-2.5090696333749305038864384e+25', '-664', 9);
      t('24794.911296', '5.4', 6);
      t('7077398515.1515538432', '93.32', 5);
      t('-1.4520042511984659693722813984375e-130', '-2.8295E-19', 7);
      t('4', '4', 1);
      t('372088627687.312953646321', '781.019', 4);
      t('-5.3864523289963490660381317787272961329536e-23', '-0.000658806', 7);
      t('-1.8', '-1.8', 1);
      t('1', '-5.9', 0);
      t('1', '2', 0);
      t('-6.4097340625', '-1.45', 5);
      t('170859375', '15', 7);
      t('595732589817199.440265999920799232', '43.82', 9);
      t('1.7080198121677824e+36', '-4200', 10);
      t('1', '658.8', 0);
      t('136.460505366756569881', '2.269', 6);
      t('-1', '-1', 3);
      t('236007.159691873761', '-22.041', 4);
      t('1', '-1.1', 0);
      t('287803125756.085809269657829376', '18.76', 9);
      t('4.1069049025e-34', '-2.02655E-17', 2);
      t('-8', '-2', 3);
      t('-5.0787635527751e-52', '-5.51E-11', 5);
      t('-8', '-2', 3);
      t('1704883919.2576', '203.2', 4);
      t('22106814.0740608', '11.2', 7);
      t('3.7481851264119295287828498195966142655968201e+23', '227.71', 10);
      t('-3', '-3', 1);
      t('5.308416e-54', '4.8E-14', 4);
      t('1', '-1', 8);
      t('1', '-4.1', 0);
      t('398', '398', 1);
      t('1', '1.17981E-18', 0);
      t('255896509713547.45824', '761.4', 5);
      t('16807', '7', 5);
      t('1', '232.6', 0);
      t('2.67066142562472466573674890357652039841e+30', '-6358.1', 8);
      t('390625', '-5', 8);
      t('85766121', '21.0', 6);
      t('2206809.987903620081317314341735861401', '4.309', 10);
      t('6.1917364224e-80', '-1.2E-8', 10);
      t('64', '-2', 6);
      t('-1', '-1', 7);
      t('-39.8778220049', '-2.09', 5);
      t('892496818.033068251283537321', '-31.029', 6);
      t('1.1289646949223432899980166202016362758071452681629968849e+25', '320.087', 10);
      t('1932991.455312009', '124.569', 3);
      t('635307227133823.258624', '-293.2', 6);
      t('784', '-28', 2);
      t('-43361725294765860565.175323475675341312', '-152.02', 9);
      t('1589.6036888689492933115234375', '4.36775', 5);
      t('1', '-18.4', 0);
      t('20832.8532313216810321678408500840248440324096', '3.46612', 8);
      t('6.5536', '-1.6', 4);
      t('174729381067.247616', '5590.56', 3);
      t('-4.084101e-14', '-0.0021', 5);
      t('7.46848810699576790739263937619996819197249e+21', '153.93', 10);
      t('2.09881105970752e-16', '0.0000059428', 3);
      t('23298085122481', '-169', 6);
      t('1', '-4.095E-11', 0);
      t('30016915.773120638290557721', '17.629', 6);
      t('16807', '7', 5);
      t('130666515.5580240243056896', '-10.34', 8);
      t('-5.97080224872032e-91', '-9.02E-19', 5);
      t('-3450.25251', '-5.1', 5);
      t('43046721', '-9', 8);
      t('1', '1', 1);
      t('3545.66529682492339392399', '5.1279', 5);
      t('3396.171616714297', '15.0313', 3);
      t('4.622674003397519975764019459730496e+33', '-408146', 6);
      t('1', '918.0', 0);
      t('7.59375', '1.5', 5);
      t('-67822.3072849', '-4.90', 7);
      t('3.7588592026706176e-104', '-1.18E-13', 8);
      t('1', '1', 3);
      t('5237990.22862336', '47.84', 4);
      t('11698.5856', '10.4', 4);
      t('110075314176', '24', 8);
      t('3.24210716131761936e-27', '2.38620E-7', 4);
      t('9', '3', 2);
      t('14641', '121', 2);
      t('62.81386652381601821841', '2.81523', 4);
      t('1', '8', 0);
      t('4.29981696e-160', '-1.2E-20', 8);
      t('1.692652673311521044295612689449216e-7', '-0.14242', 8);
      t('1', '-19.5', 0);
      t('1', '8621.8', 0);
      t('7.907e-7', '7.907E-7', 1);
      t('1.61051', '1.1', 5);
      t('1.553e-14', '1.553E-14', 1);
      t('858461358961485360081', '171171', 4);
      t('64', '-2', 6);
      t('-2.9', '-2.9', 1);
      t('-2.0661046784e-179', '-1.4E-20', 9);
      t('39.0625', '-2.5', 4);
      t('-391460020121.8781037', '-45.3', 7);
      t('-80.1', '-80.1', 1);
      t('3.5831808', '1.2', 7);
      t('41.08469075197275390625', '-1.45', 10);
      t('-128', '-2', 7);
      t('-5277043158.170301334052958483', '-12.03', 9);
      t('100.31024025', '10.0155', 2);
      t('262144', '4', 9);
      t('-2.66450474490105494016e-70', '-1.86E-8', 9);
      t('1.58541338622748269695158625134808009096449e+21', '-131.83', 10);
      t('1.69e-14', '1.3E-7', 2);
      t('81', '-3', 4);
      t('1.3979045762098993055105649e+25', '327', 10);
      t('-2.8334269484119140625e-17', '-0.0145', 9);
      t('8455365204.69607', '96.7', 5);
      t('4.826809', '-1.3', 6);
      t('-4.2027e-14', '-4.2027E-14', 1);
      t('-3671885391606530844.02199', '-5163.9', 5);
      t('1.4833', '1.4833', 1);
      t('1078702060.96', '32843.6', 2);
      t('16384', '4', 7);
      t('0.000041046707114327285209693732389121', '-0.185729', 6);
      t('9.04141586678594150656e-76', '1.73404E-19', 4);
      t('7', '7', 1);
      t('-5.408864751631992324037382349788164206309e+39', '-25989', 9);
      t('3.6213725246884329693766314512921496510839580087890625e-58', '0.00000180255', 10);
      t('51.58686976', '-2.68', 4);
      t('32562222.2784028467808485507564561204461862636001', '5.6399', 10);
      t('1.5269627878770126091369423832739776731492122624e-24', '-0.0041532', 10);
      t('2.27128515349184346452713121698128944001e-82', '-6.849E-9', 10);
      t('788.12330352545906108118941549114886272', '2.59298', 7);
      t('-128', '-2', 7);
      t('2.43585613160298150834272926486523151679435546875e+29', '1841.55', 9);
      t('3573226485.213841', '39.1', 6);
      t('5.0912', '5.0912', 1);
      t('1.302260124847515625e-102', '1.0450E-17', 6);
      t('-1097881.796860068547323829', '-4.69', 9);
      t('24.137569', '1.70', 6);
      t('67.937289638464', '-2.02', 6);
      t('-91125', '-45.0', 3);
      t('3.5658406477912053139330818066558837890625e-96', '1.17225E-12', 8);
      t('5.11226325150500959599107782635087831282590275214649e-160', '-1.17723E-16', 10);
      t('67.937289638464', '-2.02', 6);
      t('-3125', '-5', 5);
      t('-3125', '-5', 5);
      t('-2983765.0756983032103435524997723277', '-8.4133', 7);
      t('4535877.137495584829386816', '-12.866', 6);
      t('256', '-2', 8);
      t('-7.9', '-7.9', 1);
      t('4.18161601', '1.430', 4);
      t('2.3591116836e-38', '-1.53594E-19', 2);
      t('6648326359.9150104576', '9.6', 10);
      t('65536', '-4', 8);
      t('22777216155500625', '-12285', 4);
      t('1', '-1.14E-9', 0);
      t('1', '7.4', 0);
      t('1.21', '1.1', 2);
      t('0.248', '0.248', 1);
      t('-2187', '-3', 7);
      t('1.48996e-23', '-3.86E-12', 2);
      t('2.49173e-14', '2.49173E-14', 1);
      t('-2738.124199', '-13.99', 3);
      t('-2.7044661231722633428249e-63', '-3.0649E-13', 5);
      t('0.0000998001', '-0.00999', 2);
      t('9', '3', 2);
      t('-331.370935156703232', '-3.192', 5);
      t('2.611824102393094023763', '1.147', 7);
      t('-527', '-527', 1);
      t('27', '3', 3);
      t('2.313441e-34', '3.90E-9', 4);
      t('1', '-8.00148E-16', 0);
      t('6.427669793976056365481141274099681e+25', '-1682.7', 8);
      t('-27', '-3', 3);
      t('256', '-2', 8);
      t('59049', '-3', 10);
      t('8.7713801081173367580884490451432713332434379776e+26', '494.66', 10);
      t('20234327779106168.4159474599729911316138226499265176167424', '42.7178', 10);
      t('-27', '-3', 3);
      t('0.009411328144', '-0.097012', 2);
      t('349044.64', '-590.8', 2);
      t('4750.104241', '-4.1', 6);
      t('-173928970714601588962.8103429', '-778.9', 7);
      t('3656158440062976', '-36', 10);
      t('6.12220032e+22', '1800', 7);
      t('1', '3.4', 0);
      t('9.99997000003000028999940000030000299999700000000001e+29', '9999990000.0000001', 3);
      t('9.70097321773035876225154576358130561e-37', '0.000031503', 8);
      t('9.851127637605409e-117', '-4.63E-20', 6);
      t('1', '-1.4E-9', 0);
      t('-4.52470110728381829e-7', '-0.00767709', 3);
      t('282475249', '7.0', 10);
      t('16651779441254092864', '1598', 6);
      t('729', '3', 6);
      t('6.90946358996746999370693799867018948630842395035736169049e-104', '-4.82997E-11', 10);
      t('684.84796416', '26.1696', 2);
      t('-1', '-1', 5);
      t('1', '-6', 0);
      t('0.0000078310985281', '-0.23', 8);
      t('2.274064', '-1.508', 2);
      t('3.04122555034158459939649e-47', '-0.0000223', 10);
      t('696452982073287.871843324909094936562277581368328192', '44.5872', 9);
      t('-7.5151448e-29', '-4.22E-10', 3);
      t('1', '6', 0);
      t('-12.708', '-12.708', 1);
      t('70', '70', 1);
      t('2187', '3', 7);
      t('-1.628413597910449e-174', '-4.9E-20', 9);
      t('-6.312457192887951173182283446626151709594241e-66', '-5.6961E-8', 9);
      t('0.000299069043583441159212021318210939', '0.4059', 9);
      t('15.995353981724701', '1.741', 5);
      t('1', '97857', 0);
      t('0.221585791441', '-0.470729', 2);
      t('1', '52.0023', 0);
      t('-26015680550432', '-482', 5);
      t('22903.7956', '151.34', 2);
      t('6.561e-17', '-8.1E-9', 2);
      t('-93189625398108974.44387339079552', '-265.58', 7);
      t('-3086125724460522.34468469084288', '-163.22', 7);
      t('0.0000051', '0.0000051', 1);
      t('19683', '3', 9);
      t('-2.4507253464874125175251e+22', '-30051', 5);
      t('-38.907147732329430154371456512', '-1.502', 9);
      t('4.68733667816790896452997907438948199465216e+41', '161758', 8);
      t('64', '-2', 6);
      t('27541696650101.74182563635028557824', '-22.08', 10);
      t('1.352771823277379852935844331805603817270014056494234420224e-23', '-0.00516562', 10);
      t('1', '1', 4);
      t('-2350072823968', '-298', 5);
      t('8941.5936', '-94.56', 2);
      t('97241.5', '97241.5', 1);
      t('6.93207873781332929149e-50', '9.49E-8', 7);
      t('-59049', '-9', 5);
      t('-8882.144880086754771640625', '-3.665', 7);
      t('8100981934880.472', '20083.8', 3);
      t('16', '4.0', 2);
      t('6.561e-49', '-9.00E-13', 4);
      t('-446592952.353220867168501', '-53.701', 5);
      t('-3.2466525536194576823494051652634346881e-125', '-1.47210E-14', 9);
      t('3.89751', '3.89751', 1);
      t('3.8443359375e-107', '1.5E-12', 9);
      t('493.039', '7.9', 3);
      t('-16807', '-7', 5);

      t('49478904727733663575.051582184770446498259493718971258958961046708278746324459568256251259157238318185790764612200843144821137580796334089638532287323488178607687532035618686192601481827902773410791645057647691925965756808571011539462511641266331263543939501901006735272661302011976870015625991111560481188335365459566760212844848008439578745211448299643484693328447464460429576345111356618402802188681216', '-1.60380', 96);
      t('1.17647340482075248419254427344376045314316013640615098803852731448350843468375614975229837000370025634765625e+81', '-1312.5', 26);
      t('7.0251816660378376802360594609084621021532608383100803495211258733288152327693358768741786747381360859889479870288549139760601303377485234176e+87', '-2391.76', 26);
      t('85.717123455378345835968064', '2.0998', 6);
      t('7.8189586726154755713303078223442071754329e+40', '187', 18);
      t('9.145283009860369082115124525217171723626500086794105722560960199131059600008740516579605574000306840952542591838726900925804876261491646795282472377021036430500854987560433039755667787412917103148092128371355207976203112911565783359385741850905996481e+41', '-6.4113', 52);
      t('2.05766289512932241998482631797034621069017517962263802542480365981262536498089637707776e+86', '26', 61);
      t('98190573319064.214163360748608660888346857427032348178060040012159036566957731914573312588336568078808326155328828092023492584783227218123097647282496144318320115860427194595696623235777670393347299594686642872330179664094829207439052010438267983369137644871417464586087393161049', '-1.6293', 66);
      t('1.392598192044227355988772015943279484446048049140235246881310663971517522995991944491655264930301742862780134225258915488062891063359354742689683631308848403923615202977361e+171', '109', 84);
      t('1.5469996446227372120183605762031536360861258626528255060075983309687394111102266369973688377324297491658050323998067994446097153176237864040180207896595918522219595889946775556217e+64', '13.37', 57);
      t('417.53905413413116367045797', '1.3', 23);
      t('1.624290817967129588779052613030846258081e+39', '79677', 8);
      t('6.613998972307900952958925063693292646912001305426127894831260851822286968476028114198011923029274945784114379928252947652708965396453170282038903005249536e-263', '0.00000908', 52);
      t('17179869184', '2', 34);
      t('9.7756260861181096053516970094092017016032995016954767790504110039917368643756356818044285001644705953440430468819149794081183248976623767084182482857941562203266736374606395800621259352114936429301555533971456e+141', '131.6', 67);
      t('4294967296', '2', 32);
      t('131621703842267136', '-6', 22);
      t('7.9228162514264337593543950336e+28', '2', 96);
      t('-1', '-1', 41);
      t('5.0096959237841976223015468271587016074738912992534254294320102857326166341642003475731604090433896328441157235303061782495282575910872792923981113856240569836427242032573810996210128117467500761653330557379347005097932959928243111015057764620250811725789666461853189934772359267843261626881e+197', '140.9', 92);
      t('2.404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415424e+111', '32', 74);
      t('2.69721605590607563262106870407286853611938890184108047911269431464974473521e+22', '-2.7', 52);
      t('18.174', '18.174', 1);
      t('1.36891479058588375991326027382088315966463695625337436471480190078368997177499076593800206155688941388250484440597994042813512732765695774566001e+43', '2.7', 100);
      t('1.25668660115116491467662710973545031109788152235501170924313646703423681882164573441433515503588152722789494580469301248e+72', '34.2', 47);
      t('1.56438420672167084519979701497174364597412396629019101951505612890666817698608365177006994887516584111152450449887451995069033040411213741933147153316594951835865202053237255800944727011696760985308614176976019463960094165747239428884158901702435389388132623055120422260406418255249330452909476806656e+299', '1308', 96);
      t('-1.366174308182025187777528918308146941320736787278460889575749404867695325446359807161410602138908197731224033169833047036778978022709170976735608988099868310813030127497812540494011203545816852288666658682985428600019476831917843e+58', '-4.83', 85);
      t('2.966806088806219456880539423158152815514806645521282752514016241570099725287916962770395912230014801025390625e+28', '-5.15', 40);
      t('8589934592', '2', 33);
      t('3.92012913845865034844198476089476040042936801910400390625e+28', '-10.5', 28);
      t('6.26204859896956162110746451442214931102399028194694661966016701109504299345041406486245804277657094315831017177064948219797627444240188709011456e+72', '10.6', 71);
      t('-7.4010922571797388655581604684527426699437277457499992187268655958229686891933340740793991046504324130585438416249947232728346081088006867719609592595610095069331022367447133421906806310032697675369409918188139600222703781482594772971289070262621142441874895437059567046831661495957273728351051362944953711082346089727330717918651409489163662706555003193741825901442633007312863953564385259087744338361955671878877893732351367361843585968017578125e+364', '-31956.5', 81);
      t('6.192736416792149755132475219493405669399778858602560762871794455317449717448580836229845787580888290473782381059983387805505374173265513677435445890655671110840202944429668728225878544903602239e-270', '0.000319', 77);
      t('2.321827472731847506187210910989207010589651530892302311791322352855446782760907718473019283821056753242967949096791603718944064726033664384082861996009850744961116407128920163494805886357836270766853975184523023642990429569615539676822828070446559161161124635674389704743948383107212919966543969471039720464085404567773913503635201792672811032312063265454094042341369554833714443413857449688164664657173315113983032808001e+220', '159.83', 100);
      t('4.953736650985698001275587761883016173298229503362193331584010106486052779761329981195411366329068322677550960044762649449732919438910119549694010717647780952298320287365138145210431380601324547389442337520392258009e+27', '-2.797', 62);
      t('-338678221586896.02233451034424755534030583977124338116841050703894756829829935320421996887', '-2.47', 37);
      t('-3.181403788572786716059998378326698266679069780899509454959934125355133265193e-226', '-0.0000057', 43);
      t('2.2481244795444847556680083178853571141700204725943661497539185751725919215990484669445118877448657555202573745174750533635052209260608084995835891707958259234271442982681066779696130155696868114346639852814575962457281749995256623713554214237458259176913852401064878760784275382146658972801541462348779288776844691139086889351786721e+179', '229.03', 76);
      t('1.09544203269304121665791452848994634135137143229447033238750572549632571476402641497730897157401184093614916314911584167715115647604065370616785146866296916632437569033863034458711783186506727022529378159297811462454675308057682780534190256280910865229376785975491743196806996272790525705427972427376758443312371576466422700240638756574402393677191376501159420836822933903938571935476091044876631814554274289087939783553959776485376e+31', '-2.0436', 100);
      t('-18437563379.178327736384102280592359424', '-2.4', 27);
      t('-9.9938258857146531850367031e-85', '-0.0000000231', 11);

      BigNumber.config({EXPONENTIAL_AT: 0});

      t('2e+0', 2, 1);
      t('1.6e+1', 2, 4);
      t('6.25e-2', 2, -4);
      t('5.0600621890668482322956892808849303e+20', '907.27', 7);
      t('-7e+0', '-7', 1);
      t('-9.01e+2', '-901', 1);
      t('1.016984074247269470395836690098169093010136836967e+39', '21584.7', 9);
      t('-8.983272e+1', '-89.83272', 1);
      t('5.308416e+6', '-48', 4);
      t('3.83432050166120236679168e+23', '52088', 5);
      t('-2.679971527468745095582058350756311201706813294321409e+51', '-517889', 9);
      t('5.067853299870089529116832768e+2', '3.47508', 5);
      t('3.48822062687911109850066182676769e+32', '4129', 9);
      t('1e+0', '-429.32321', 0);
      t('-4.2773e+0', '-4.2773', 1);
      t('-5.8169306081172252508071119604378757744768e+12', '-66.6082', 7);
      t('1e+0', '-7.0654', 0);
      t('-1.51655708279450944384385164853883404204414169862685507e+46', '-3956084.3', 7);
      t('8.1e+1', '-3', 4);
      t('1.296e+3', '-6', 4);
      t('2.9e+0', '2.9', 1);
      t('1.764e+3', '-42', 2);
      t('-9.3418332730097368870513138581415704704611459349313e+49', '-356673', 9);
      t('1.517108809906561e+15', '79', 8);
      t('3.1063e+4', '31063', 1);
      t('1e+0', '-21914.49416', 0);
      t('1.4586250332983909737249e+10', '49.43', 6);
      t('-4.208092749838142546109102616048103440952842087045576022556672e+46', '-4577028.48', 7);
      t('3e+0', '3', 1);
      t('1.4301918832998497740081358663795354088849575358074712812593899025686055664154241e+71', '784195396.7', 8);
      t('1.914994057877243921847839041839022064004621019747303000421532785660701999616e+57', '2315715.86', 9);
      t('1.40379741624014849127481344e+26', '804', 9);
      t('2.1305364420464979969795870610432e+21', '18437.32', 5);
      t('1e+0', '-48', 0);
      t('7.018e+3', '7018', 1);
      t('-5.8149737003040059690390169e+25', '-729', 9);
      t('2.537640625e+9', '50375', 2);
      t('1e+0', '-287', 0);
      t('-1.879616311308566413901e+11', '-179.81', 5);
      t('-3.73314280039567349e+17', '-3269', 5);
      t('8.503056e+6', '-54', 4);
      t('1.114538684361769559136325232186960408417483078419495901986816e+28', '3205.4344', 8);
      t('-4.27504205e+3', '-4275.04205', 1);
      t('-4.18195493e+8', '-53', 5);
      t('-1.32651e+5', '-51', 3);
      t('-4.309348e+6', '-4309348', 1);
      t('5.2697770766776504576e+19', '-7259323024', 2);
      t('7.334473e+6', '7334473', 1);

      t('4.2587208337796928798976e+22', '-674', 8);
      t('2.5398714208994744315474847375553672678449979949471296663472852498581058264323e+76', '82219173067', 7);
      t('3.8595867893817789e+16', '38595867893817789', 1);
      t('1e+0', '6607929.612', 0);
      t('2.03571124747179512510686558355453870501244709050625e+34', '-377727882.4895', 4);
      t('2.45293306092383728169089251608498030232760591201e+47', '-838901', 8);
      t('1e+0', '-3', 0);
      t('3.834566459566834602823771544700625e+33', '248845085', 4);
      t('9.9603189655699799982630929090395077799549456e+43', '-99900649454', 4);
      t('4.96981290961e+11', '-89', 6);
      t('1.58714182711801961914035004098749014540213215369889902124332186866896819339082286680313155541911581006508901525889227579394470766224134369e+74', '175595288.8066529', 9);
      t('1.326409999413464946341631126231535779147856072448189797080406801e+19', '-60348.91227522707', 4);
      t('-2.050107090202653994550415295865311714194868710425929507925126964581376e+69', '-72837546696276', 5);
      t('2.0550048143314549586011369057890711537772093948321e+49', '-2129135057417', 4);
      t('1e+0', '3943801.89538088', 0);
      t('2.17438998607457e+14', '737', 5);
      t('-2.273581752472e+10', '-22735817524.72', 1);
      t('1.51891070159203e+12', '1518910701592.03', 1);
      t('-6.42199562432576e+14', '-86276', 3);
      t('1.33010089e+8', '11533', 2);
      t('5.1662108991396663099278667856407361e+26', '-4767525.59', 4);
      t('-2.197e+3', '-13', 3);
      t('5.7261215932713209368576e+22', '489176', 4);
      t('2.63105908732834720740862027188940646962896811537209872829318157804817881e+71', '800488505731', 6);
      t('-7.8151742291e+2', '-781.51742291', 1);
      t('-2.5619022164869008875e+19', '-2947955', 3);
      t('1.888497394256858387595532951034741052100428552247961627495355202904723558656e+3', '-6.592180609971056972', 4);
      t('1.227102111503512992112190463e+27', '1023', 9);
      t('4.762033342402709161761620616017059035607e+39', '86210167', 5);
      t('1.0526899962331857933889886363874543386374239042307e+34', '6374705.107', 5);
      t('8.3043861038534085480857730707894983974895341475449922046323943309856240866914720437665233e+61','7584431.953', 9);
      t('5.4787291089024129877918140548999194405505068584642366052046899220357579072497678119620025119214429570421679076944647727607529032984620150444553526120397e+151', '72419131838243117', 9);
      t('6.1203577224967e+13', '61203577224967', 1);
      t('-2.6742593337474927167986914400257603e+34', '-82827', 7);
      t('3.490938536648870448335810684618787855050175354916141007545163425555957335829e+75', '247548469', 9);
      t('6.634204312890625e+15', '-95', 8);
      t('-9.171271e+1', '-91.71271', 1);
      t('5.65625765123605544067809018296482219675982471958093705254464e+59', '-9093998202', 6);
      t('3.518743761e+9', '-39', 6);
      t('1e+0', '-5420353171006060062', 0);
      t('5.93548365959371477646876280183482286894691258676416e+26', '840398698.65610156', 3);
      t('3.05021119744369888239209417566581849921624834657246971302432870103990316674041818082170961e+89', '-820455414011161', 6);
      t('3.2696530375744e+11', '571808.8', 2);
      t('7.5976962512577721e+4', '-275.639189', 2);
      t('1.902906615566371112511312310657143013376e+4', '7.1760176', 5);
      t('1.518464318469541965652429354308518011195184133938752135708801e+60', '33317743', 8);
      t('2.13200587786233626937431579432326390786198510967574168821917803373975072742648456640669209424089001389646413824e+92', '2444169945946508.968', 6);
      t('2.22147484530834915265639755288996e+8', '-14904.612860817114', 2);
      t('1.492078384275163354935132877205588401e+36', '-1105217899', 4);
      t('-8.7063159741318127407528723363285743789464660953004359884056134456089069164858324456719131936164339926111276712486987242162931090900645752178720048529774274761e+31', '-3538.91793390607241', 9);
      t('-2.13718835678657210508559759338095142848187133522908355458407047497607984468725768078407393313580673815584615486794665109272908382172581587476837516398285148210296241056810064518192239263716914808770258390627580625498767684881468120398755080836616073670778327363332334149416019505078840253645081995145611223104498789608205428495349224542916922658293232780298744501314853052243306816366148311919597221018850456061527891844821902500302159789434488225792e+125', '-43837.525307806238', 27);
      t('6.6067183217034216835242910438119195789788339709493349261334009277024675568767116522521737472677079426635748603259327817717050761351617610783486587612028204471198915744801916514515768618923473461233676712402753179616115705829361991013069927369820940249862144e+28', '-63581.52864975395137421365938883267810362492', 6);
      t('3.4979655423042386318207008930737637967359866053138998526505479068249644854876701482811561341347105355107695596776164641704434681969517211923069874207364828070027467521475982678466251216378786468053405366050900916905682920934733855175647035328921497719019616796867272653837232009633511918699584196136643032274244642212313884180837128156688381283842300678798685499010807063746785776492193558002382725297304258913361e+62', '860658355.93419774133511168973596889241553275604551215135281', 7);
      t('2.43e+2', '3', 5);

      BigNumber.config({DECIMAL_PLACES: 1000});

      t('5.5626846462680034577255817933310101605480399511558295763833185422180110870347954896357078975312775514101683493275895275128810854038836502721400309634442970528269449838300058261990253686064590901798039126173562593355209381270166265416453973718012279499214790991212515897719252957621869994522193843748736289511290126272884996414561770466127838448395124802899527144151299810833802858809753719892490239782222290074816037776586657834841586939662825734294051183140794537141608771803070715941051121170285190347786926570042246331102750604036185540464179153763503857127117918822547579033069472418242684328083352174724579376695971173152319349449321466491373527284227385153411689217559966957882267024615e-309', 2, -1024);

      BigNumber.config({EXPONENTIAL_AT: 1000});

      t('179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216', 2, 1024);

      new Test().isException(()=> {new BigNumber(2).pow(4.4)}, ".pow(4.4)");
      new Test().isException(()=> {new BigNumber(2).pow('5.5')}, ".pow('5.5')");
      new Test().isException(()=> {new BigNumber(2).pow(-2.1)}, ".pow(-2.1)");
      new Test().isException(()=> {new BigNumber(2).pow('-11.5')}, ".pow('-11.5')");
      new Test().isException(()=> {new BigNumber(2).pow(0.99)}, ".pow(0.99)");
      new Test().isException(()=> {new BigNumber(2).pow('-0.044e2')}, ".pow('-0.044e2')");

      new Test().isException(()=> {Utils.bigPow(undefined)}, ".pow(undefined)");
      new Test().isException(()=> {Utils.bigPow(null)}, ".pow(null)");

      new Test().isException(()=> {Utils.bigPow(true)}, ".pow(true)");

      new Test().isException(()=> {Utils.bigPow(false)}, ".pow(false)");

      new Test().isException(()=> {Utils.bigPow([])}, ".pow([])");

      new Test().isException(()=> {Utils.bigPow({})}, ".pow({})");
      new Test().isException(()=> {new BigNumber('12.345').pow('')}, ".pow('')");
      new Test().isException(()=> {new BigNumber('12.345').pow(' ')}, ".pow(' ')");
      new Test().isException(()=> {new BigNumber('12.345').pow('2.66e+1')}, ".pow('2.66e+1')");
      new Test().isException(()=> {new BigNumber('12.345').pow('4e')}, ".pow('4e')");
      new Test().isException(()=> {new BigNumber('12.345').pow('hello')}, ".pow('hello')");
      new Test().isException(()=> {new BigNumber('12.345').pow('\t')}, ".pow('\t')");

      new Test().isException(()=> {Utils.powFun('12.345',new Date)}, ".pow(new Date)");

      new Test().isException(()=> {Utils.powFun('12.345',new RegExp(''))}, ".pow(new RegExp(''))");

      new Test().isException(()=> {Utils.powFun('12.345',()=>{})}, ".pow(()=>{})");
      new Test().isException(()=> {new BigNumber('12.345').pow(7.5)}, ".pow(7.5)");
      new Test().isException(()=> {new BigNumber('12.345').pow('-1.123e1')}, ".pow('-1.123e1')");
      new Test().isException(()=> {new BigNumber('12.345').pow('-0.01')}, ".pow('-0.01')");
      new Test().isException(()=> {new BigNumber('12.345').pow('-1e-1')}, ".pow('-1e-1')");

      // As negative exponents involve a division, the result depends on the decimal places and rounding mode specified:

      BigNumber.config({DECIMAL_PLACES: 20, ROUNDING_MODE: 0, EXPONENTIAL_AT: 0});

      t('-5.196101e-14', '-453.8', -5);
      t('1e-20', '8308633', -17);
      t('1e-20', '834', -23);
      t('1.6666666666666666667e-1', '6', -1);
      t('-1e-20', '-71', -29);
      t('9.765625e-4', '-2', -10);
      t('1e-20', '62.8159321', -18);
      t('-6.333754988633e-8', '-2.0557545', -23);
      t('1e-20', '33', -24);
      t('-1e-20', '-5235.7923', -27);
      t('-1.29728108e-12', '-9169', -3);
      t('2.323057312542e-8', '3', -16);
      t('1e-20', '1523620.62', -20);
      t('1e+0', '1', -16);
      t('1e-20', '13', -25);
      t('1.5241579027587259e-4', '-9', -4);
      t('1e-20', '531385.4', -11);
      t('8.4322648810503e-7', '-33', -4);
      t('1e-20', '480546.8181', -13);
      t('-1e-20', '-83591', -9);
      t('1e-20', '457.54', -29);

      BigNumber.config({DECIMAL_PLACES: 40, ROUNDING_MODE: 1});

      t('0e+0', '41', -25);
      t('-0e+0', '-26403', -25);
      t('-1.83965573171075e-25', '-28.5112', -17);
      t('1.3846500590693220280355384e-15', '72', -8);
      t('0e+0', '388528.736', -15);
      t('3.934117957191277521704056558e-13', '9', -13);
      t('0e+0', '523512', -7);
      t('0e+0', '65', -30);
      t('0e+0', '-43284153', -10);
      t('0e+0', '825797.7867', -9);
      t('1.45171e-35', '14.49674917', -30);
      t('4.11323023e-32', '713.2735', -11);
      t('6.75896391888332043299090622098e-11', '-2.8992', -22);
      t('0e+0', '9006558087', -9);
      t('2.35898248759e-29', '9', -30);
      t('4.2316349570524877e-24', '-835', -8);
      t('2.306295e-33', '-18', -26);
      t('2.735111227791253388712174e-16', '6', -20);
      t('2.11e-38', '-5855.32565', -10);
      t('0e+0', '-3338', -20);

      BigNumber.config({DECIMAL_PLACES: 2, ROUNDING_MODE: 2});

      t('1e-2', '95636', -15);
      t('1e-2', '802.942', -28);
      t('-0e+0', '-31645', -27);
      t('1e-2', '-839791.83', -2);
      t('1e-2', '-2.8383287', -6);
      t('1e-2', '61689855', -2);
      t('1e-2', '7.404284', -20);
      t('1e-2', '898183.004', -11);
      t('1e-2', '-771825.7331', -16);
      t('1e-2', '-33080.258', -12);
      t('2.6e-1', '1.4064', -4);
      t('1e-2', '-21411.3', -8);
      t('1e-2', '-444', -8);
      t('1e-2', '-456', -26);
      t('-0e+0', '-84450.1821', -15);
      t('-0e+0', '-393', -15);
      t('2e-1', '5', -1);
      t('-0e+0', '-7902377.6', -27);
      t('1e-2', '4695.5', -19);
      t('-0e+0', '-198', -25);

      BigNumber.config({DECIMAL_PLACES: 50, ROUNDING_MODE: 3});

      t('2.5224883818467056168924068720414334436865e-10', '-62963', -2);
      t('0e+0', '231061', -19);
      t('-1.33787022089433001581801823890617687241090613775e-2', '-74.74566549', -1);
      t('-1e-50', '-64577145', -15);
      t('-9.2e-49', '-7293822', -7);
      t('0e+0', '6853973492', -16);
      t('5.2813339504e-40', '61', -22);
      t('0e+0', '-376283', -30);
      t('0e+0', '728444.059', -27);
      t('-1e-50', '-368631.5722', -23);
      t('4.704e-47', '52631521', -6);
      t('3.57224508459076360310928212162780064014631915e-6', '6', -7);
      t('4.406926288364964664194824943180564261e-14', '469', -5);
      t('1.4551915228366851806640625e-11', '-4', -18);
      t('2.44140625e-4', '8', -4);
      t('0e+0', '32065.3618', -15);
      t('3.7252902984619140625e-9', '-4', -14);
      t('0e+0', '911', -18);
      t('-4e-50', '-226', -21);
      t('0e+0', '6584.1', -26);

      BigNumber.config({DECIMAL_PLACES: 101, ROUNDING_MODE: 4});

      t('2.59086221967070203169073279093835370593438251373865163612424184820637293172653704e-21', '7280902.7', -3);
      t('0e+0', '-864898946', -18);
      t('-6.92056804675353e-87', '-4243081.8', -13);
      t('4.535096358699077993843952445171547362594555572598969066238446195262298595680218449724146e-14', '28041.71', -3);
      t('3.935198147655009521015158343912785620124855179789168611080864740903996079598197380173314783859e-8', '-71', -4);
      t('0e+0', '-22174.6', -24);
      t('-2.99258857055507737893205013175602880569082447633970771174973412126870110482831422782576004e-12', '-44.287279', -7);
      t('0e+0', '470977.3', -28);
      t('0e+0', '1491202647', -13);
      t('7.6416831024439568243705975297501568471970365586580909307933089678e-37', '-63.95', -20);
      t('1.265999063160693261086986795629771233969286862727721581486029700338021749863905100710225474433149e-5', '78989', -1);
      t('0e+0', '4669863', -27);
      t('0e+0', '68895.202', -25);
      t('2.739979564368301888555652244200021058884694833454583774293368045917370205983074157e-20', '8174.2993', -5);
      t('0e+0', '-84777.31264', -24);
      t('-1.61732012052302022569648421623255682672403613813784e-51', '-8072.642', -13);
      t('9.226701330968798029567410873712667474511623e-59', '86', -30);
      t('-4.52671289980544818356121416933990316474525113390656357838131753149833770190909867e-21', '-805.966', -7);
      t('-0e+0', '-62548432.8', -25);
      t('1.2208830071779439347812238188621035387222053043582168736013775635140091964690008930489382362e-10', '-90503', -2);

      BigNumber.config({DECIMAL_PLACES: 77, ROUNDING_MODE: 5});

      t('0e+0', '66772.53301', -27);
      t('3.40661780943015419152e-57', '368.73348', -22);
      t('5.601099885e-68', '5310955.57', -10);
      t('4.7583024e-70', '4452', -19);
      t('6.90016290197904917102412334010616805829465226173165163729397834725e-12', '-617', -4);
      t('0e+0', '-107429', -28);
      t('3.31141522e-69', '2654.601393', -20);
      t('0e+0', '29989989', -29);
      t('0e+0', '86252993', -26);
      t('2.526578217600621656723144619575640216185522e-35', '27.64147', -24);
      t('0e+0', '67591', -22);
      t('1.045378162048104058782115833482674315266588732330848431111612381555126e-8', '95659163', -1);
      t('0e+0', '-442', -30);
      t('-1.1560137793600081456221291815651129339464282155352978388454e-19', '-13', -17);
      t('5.58677799866283804991416971229e-48', '8664.361199', -12);
      t('2.279303152972397504104114985089222523674913654876994600999395e-17', '352695', -3);
      t('-0e+0', '-1058', -27);
      t('-1.59341022326498995406233262095617818e-42', '-6306.5', -11);
      t('7.1812368392200578e-61', '-5741', -16);
      t('-4.13699730669298062229277514676940165486322151495730381776e-21', '-71.29', -11);

      BigNumber.config({DECIMAL_PLACES: 99, ROUNDING_MODE: 6});

      t('3.50565137890907848896561225350273375702045873464e-52', '282', -21);
      t('2.5679471225603104166379068675724780241775210532444313569170923793768408333314758e-20', '91', -10);
      t('-1.41295214664272077547931481358044650743763505172248724988734056104337e-30', '-57', -17);
      t('-1.6987939248665576039846745813760545846750230030808816733060274510838e-32', '-47', -19);
      t('2.5752032499330351923455285237362946185406503583972342814435847681120726508860096355483248328e-8', '78.94', -4);
      t('0e+0', '171036487', -28);
      t('-2.69509379734942915218278341741127616464435811759556667850711208302182540858969514716020661667e-7', '-3710446', -1);
      t('0e+0', '186138.741', -19);
      t('4.37024265074487259941007405227545667043223030296145105953223847971330338431363825001208e-13', '-5.922', -16);
      t('-0e+0', '-68229265', -23);
      t('4.928268737732714614617566124770385834839673627880400464580256256e-35', '-522257', -6);
      t('-2.022506359274224265530332563554654257153128338531e-51', '-7935', -13);
      t('4.113745803364219006888865973815476523221392611155744131624798603545707151167823836246769e-12', '-79', -6);
      t('1.58e-97', '7449', -25);
      t('1.118728735197209316850322750834837614213911286885421936356799842846357177424981773587541512e-9', '19', -7);
      t('2.30221163139014605760922065192648652054327053388946752033272296649e-32', '-433', -12);
      t('-2.267272190443616852157926557261723579010324347431719319355102519288715860877837553741191e-12', '-7612', -3);
      t('3.9978176310189055673570151190218519691760260637389486960244942965129919180092262453024314407659703e-2', '5.001364539', -2);
      t('-7.116521605575577249405567849234479247439447514e-54', '-804088', -9);
      t('8.903896183702542287639673e-75', '-294', -30);
      t('8.07793566946316088741610050849573099185363389551639556884765625e-28', '8', -30);
      t('-0e+0', '-81529053.21', -19);
      t('6.5536e-12', '-5', -16);
      t('-0e+0', '-393954461', -21);
      t('8.6647113997049045695e-80', '-80579504', -10);
      t('0e+0', '-148396', -20);
      t('-0e+0', '-9359', -27);

      BigNumber.config({DECIMAL_PLACES: 0, ROUNDING_MODE: 6});

      t('0e+0', '-8645', -30);
      t('0e+0', '7.24173993', -23);

      // With modulus

      BigNumber.config({EXPONENTIAL_AT: 1E9, DECIMAL_PLACES: 17, ROUNDING_MODE: 4});

      tb('-0', '-1', -1, '-1');
      tb('-1', '-1', -1, '-3');
      tb('-1', '-1', -1, '-5.7');
      tb('-1', '-1', -1, '-Infinity');
      tb('NaN', '-1', -1, '0');
      tb('-0', '-1', -1, '1');
      tb('-1', '-1', -1, '3');
      tb('-1', '-1', -1, '5.7');
      tb('-1', '-1', -1, 'Infinity');
      tb('NaN', '-1', -1, 'NaN');
      tb('-0', '-1', -3, '-1');
      tb('-1', '-1', -3, '-3');
      tb('-1', '-1', -3, '-5.7');
      tb('-1', '-1', -3, '-Infinity');
      tb('NaN', '-1', -3, '0');
      tb('-0', '-1', -3, '1');
      tb('-1', '-1', -3, '3');
      tb('-1', '-1', -3, '5.7');
      tb('-1', '-1', -3, 'Infinity');
      tb('NaN', '-1', -3, 'NaN');
      tb('0', '-1', 0, '-1');
      tb('1', '-1', 0, '-3');
      tb('1', '-1', 0, '-5.7');
      tb('1', '-1', 0, '-Infinity');
      tb('NaN', '-1', 0, '0');
      tb('0', '-1', 0, '1');
      tb('1', '-1', 0, '3');
      tb('1', '-1', 0, '5.7');
      tb('1', '-1', 0, 'Infinity');
      tb('NaN', '-1', 0, 'NaN');
      tb('-0', '-1', 1, '-1');
      tb('-1', '-1', 1, '-3');
      tb('-1', '-1', 1, '-5.7');
      tb('-1', '-1', 1, '-Infinity');
      tb('NaN', '-1', 1, '0');
      tb('-0', '-1', 1, '1');
      tb('-1', '-1', 1, '3');
      tb('-1', '-1', 1, '5.7');
      tb('-1', '-1', 1, 'Infinity');
      tb('NaN', '-1', 1, 'NaN');
      tb('-0', '-1', 3, '-1');
      tb('-1', '-1', 3, '-3');
      tb('-1', '-1', 3, '-5.7');
      tb('-1', '-1', 3, '-Infinity');
      tb('NaN', '-1', 3, '0');
      tb('-0', '-1', 3, '1');
      tb('-1', '-1', 3, '3');
      tb('-1', '-1', 3, '5.7');
      tb('-1', '-1', 3, 'Infinity');
      tb('NaN', '-1', 3, 'NaN');
      tb('-0.33333333333333333', '-3', -1, '-1');
      tb('-0.33333333333333333', '-3', -1, '-3');
      tb('-0.33333333333333333', '-3', -1, '-5.7');
      tb('-0.33333333333333333', '-3', -1, '-Infinity');
      tb('NaN', '-3', -1, '0');
      tb('-0.33333333333333333', '-3', -1, '1');
      tb('-0.33333333333333333', '-3', -1, '3');
      tb('-0.33333333333333333', '-3', -1, '5.7');
      tb('-0.33333333333333333', '-3', -1, 'Infinity');
      tb('NaN', '-3', -1, 'NaN');
      tb('-0.03703703703703704', '-3', -3, '-1');
      tb('-0.03703703703703704', '-3', -3, '-3');
      tb('-0.03703703703703704', '-3', -3, '-5.7');
      tb('-0.03703703703703704', '-3', -3, '-Infinity');
      tb('NaN', '-3', -3, '0');
      tb('-0.03703703703703704', '-3', -3, '1');
      tb('-0.03703703703703704', '-3', -3, '3');
      tb('-0.03703703703703704', '-3', -3, '5.7');
      tb('-0.03703703703703704', '-3', -3, 'Infinity');
      tb('NaN', '-3', -3, 'NaN');
      tb('-0.00411522633744856', '-3', -5, '-1');
      tb('-0.00411522633744856', '-3', -5, '-3');
      tb('-0.00411522633744856', '-3', -5, '-5.7');
      tb('-0.00411522633744856', '-3', -5, '-Infinity');
      tb('NaN', '-3', -5, '0');
      tb('-0.00411522633744856', '-3', -5, '1');
      tb('-0.00411522633744856', '-3', -5, '3');
      tb('-0.00411522633744856', '-3', -5, '5.7');
      tb('-0.00411522633744856', '-3', -5, 'Infinity');
      tb('NaN', '-3', -5, 'NaN');
      tb('0', '-3', 0, '-1');
      tb('1', '-3', 0, '-3');
      tb('1', '-3', 0, '-5.7');
      tb('1', '-3', 0, '-Infinity');
      tb('NaN', '-3', 0, '0');
      tb('0', '-3', 0, '1');
      tb('1', '-3', 0, '3');
      tb('1', '-3', 0, '5.7');
      tb('1', '-3', 0, 'Infinity');
      tb('NaN', '-3', 0, 'NaN');
      tb('-0', '-3', 1, '-1');
      tb('-0', '-3', 1, '-3');
      tb('-3', '-3', 1, '-5.7');
      tb('-3', '-3', 1, '-Infinity');
      tb('NaN', '-3', 1, '0');
      tb('-0', '-3', 1, '1');
      tb('-0', '-3', 1, '3');
      tb('-3', '-3', 1, '5.7');
      tb('-3', '-3', 1, 'Infinity');
      tb('NaN', '-3', 1, 'NaN');
      tb('-0', '-3', 3, '-1');
      tb('-0', '-3', 3, '-3');
      tb('-4.2', '-3', 3, '-5.7');
      tb('-27', '-3', 3, '-Infinity');
      tb('NaN', '-3', 3, '0');
      tb('-0', '-3', 3, '1');
      tb('-0', '-3', 3, '3');
      tb('-4.2', '-3', 3, '5.7');
      tb('-27', '-3', 3, 'Infinity');
      tb('NaN', '-3', 3, 'NaN');
      tb('-0', '-3', 5, '-1');
      tb('-0', '-3', 5, '-3');
      tb('-3.6', '-3', 5, '-5.7');
      tb('-243', '-3', 5, '-Infinity');
      tb('NaN', '-3', 5, '0');
      tb('-0', '-3', 5, '1');
      tb('-0', '-3', 5, '3');
      tb('-3.6', '-3', 5, '5.7');
      tb('-243', '-3', 5, 'Infinity');
      tb('NaN', '-3', 5, 'NaN');
      tb('-0.17543859649122807', '-5.7', -1, '-1');
      tb('-0.17543859649122807', '-5.7', -1, '-3');
      tb('-0.17543859649122807', '-5.7', -1, '-5.7');
      tb('-0.17543859649122807', '-5.7', -1, '-Infinity');
      tb('NaN', '-5.7', -1, '0');
      tb('-0.17543859649122807', '-5.7', -1, '1');
      tb('-0.17543859649122807', '-5.7', -1, '3');
      tb('-0.17543859649122807', '-5.7', -1, '5.7');
      tb('-0.17543859649122807', '-5.7', -1, 'Infinity');
      tb('NaN', '-5.7', -1, 'NaN');
      tb('-0.00539977212961613', '-5.7', -3, '-1');
      tb('-0.00539977212961613', '-5.7', -3, '-3');
      tb('-0.00539977212961613', '-5.7', -3, '-5.7');
      tb('-0.00539977212961613', '-5.7', -3, '-Infinity');
      tb('NaN', '-5.7', -3, '0');
      tb('-0.00539977212961613', '-5.7', -3, '1');
      tb('-0.00539977212961613', '-5.7', -3, '3');
      tb('-0.00539977212961613', '-5.7', -3, '5.7');
      tb('-0.00539977212961613', '-5.7', -3, 'Infinity');
      tb('NaN', '-5.7', -3, 'NaN');
      tb('-0.00016619797259514', '-5.7', -5, '-1');
      tb('-0.00016619797259514', '-5.7', -5, '-3');
      tb('-0.00016619797259514', '-5.7', -5, '-5.7');
      tb('-0.00016619797259514', '-5.7', -5, '-Infinity');
      tb('NaN', '-5.7', -5, '0');
      tb('-0.00016619797259514', '-5.7', -5, '1');
      tb('-0.00016619797259514', '-5.7', -5, '3');
      tb('-0.00016619797259514', '-5.7', -5, '5.7');
      tb('-0.00016619797259514', '-5.7', -5, 'Infinity');
      tb('NaN', '-5.7', -5, 'NaN');
      tb('0', '-5.7', 0, '-1');
      tb('1', '-5.7', 0, '-3');
      tb('1', '-5.7', 0, '-5.7');
      tb('1', '-5.7', 0, '-Infinity');
      tb('NaN', '-5.7', 0, '0');
      tb('0', '-5.7', 0, '1');
      tb('1', '-5.7', 0, '3');
      tb('1', '-5.7', 0, '5.7');
      tb('1', '-5.7', 0, 'Infinity');
      tb('NaN', '-5.7', 0, 'NaN');
      tb('-0.7', '-5.7', 1, '-1');
      tb('-2.7', '-5.7', 1, '-3');
      tb('-0', '-5.7', 1, '-5.7');
      tb('-5.7', '-5.7', 1, '-Infinity');
      tb('NaN', '-5.7', 1, '0');
      tb('-0.7', '-5.7', 1, '1');
      tb('-2.7', '-5.7', 1, '3');
      tb('-0', '-5.7', 1, '5.7');
      tb('-5.7', '-5.7', 1, 'Infinity');
      tb('NaN', '-5.7', 1, 'NaN');
      tb('-0.193', '-5.7', 3, '-1');
      tb('-2.193', '-5.7', 3, '-3');
      tb('-2.793', '-5.7', 3, '-5.7');
      tb('-185.193', '-5.7', 3, '-Infinity');
      tb('NaN', '-5.7', 3, '0');
      tb('-0.193', '-5.7', 3, '1');
      tb('-2.193', '-5.7', 3, '3');
      tb('-2.793', '-5.7', 3, '5.7');
      tb('-185.193', '-5.7', 3, 'Infinity');
      tb('NaN', '-5.7', 3, 'NaN');
      tb('-0.92057', '-5.7', 5, '-1');
      tb('-1.92057', '-5.7', 5, '-3');
      tb('-3.42057', '-5.7', 5, '-5.7');
      tb('-6016.92057', '-5.7', 5, '-Infinity');
      tb('NaN', '-5.7', 5, '0');
      tb('-0.92057', '-5.7', 5, '1');
      tb('-1.92057', '-5.7', 5, '3');
      tb('-3.42057', '-5.7', 5, '5.7');
      tb('-6016.92057', '-5.7', 5, 'Infinity');
      tb('NaN', '-5.7', 5, 'NaN');
      tb('-0', '-Infinity', -1, '-1');
      tb('0', '-Infinity', 0, '-1');
      tb('1', '-Infinity', 0, '-3');
      tb('1', '-Infinity', 0, '-5.7');
      tb('1', '-Infinity', 0, '-Infinity');
      tb('NaN', '-Infinity', 0, '0');
      tb('0', '-Infinity', 0, '1');
      tb('1', '-Infinity', 0, '3');
      tb('1', '-Infinity', 0, '5.7');
      tb('1', '-Infinity', 0, 'Infinity');
      tb('NaN', '-Infinity', 0, 'NaN');
      tb('NaN', '0', -1, '-1');
      tb('NaN', '0', -1, '-3');
      tb('NaN', '0', -1, '-5.7');
      tb('0', '0', 0, '-1');
      tb('1', '0', 0, '-3');
      tb('1', '0', 0, '-5.7');
      tb('1', '0', 0, '-Infinity');
      tb('NaN', '0', 0, '0');
      tb('0', '0', 0, '1');
      tb('1', '0', 0, '3');
      tb('1', '0', 0, '5.7');
      tb('1', '0', 0, 'Infinity');
      tb('NaN', '0', 0, 'NaN');
      tb('0', '0', 1, '-1');
      tb('0', '0', 1, '-3');
      tb('0', '0', 1, '-5.7');
      tb('0', '0', 1, '-Infinity');
      tb('NaN', '0', 1, '0');
      tb('0', '0', 1, '1');
      tb('0', '0', 1, '3');
      tb('0', '0', 1, '5.7');
      tb('0', '0', 1, 'Infinity');
      tb('NaN', '0', 1, 'NaN');
      tb('0', '0', 3, '-1');
      tb('0', '0', 3, '-3');
      tb('0', '0', 3, '-5.7');
      tb('0', '0', 3, '-Infinity');
      tb('NaN', '0', 3, '0');
      tb('0', '0', 3, '1');
      tb('0', '0', 3, '3');
      tb('0', '0', 3, '5.7');
      tb('0', '0', 3, 'Infinity');
      tb('NaN', '0', 3, 'NaN');
      tb('0', '1', -1, '-1');
      tb('1', '1', -1, '-3');
      tb('1', '1', -1, '-5.7');
      tb('1', '1', -1, '-Infinity');
      tb('NaN', '1', -1, '0');
      tb('0', '1', -1, '1');
      tb('1', '1', -1, '3');
      tb('1', '1', -1, '5.7');
      tb('1', '1', -1, 'Infinity');
      tb('NaN', '1', -1, 'NaN');
      tb('0', '1', -3, '-1');
      tb('1', '1', -3, '-3');
      tb('1', '1', -3, '-5.7');
      tb('1', '1', -3, '-Infinity');
      tb('NaN', '1', -3, '0');
      tb('0', '1', -3, '1');
      tb('1', '1', -3, '3');
      tb('1', '1', -3, '5.7');
      tb('1', '1', -3, 'Infinity');
      tb('NaN', '1', -3, 'NaN');
      tb('0', '1', 0, '-1');
      tb('1', '1', 0, '-3');
      tb('1', '1', 0, '-5.7');
      tb('1', '1', 0, '-Infinity');
      tb('NaN', '1', 0, '0');
      tb('0', '1', 0, '1');
      tb('1', '1', 0, '3');
      tb('1', '1', 0, '5.7');
      tb('1', '1', 0, 'Infinity');
      tb('NaN', '1', 0, 'NaN');
      tb('0', '1', 1, '-1');
      tb('1', '1', 1, '-3');
      tb('1', '1', 1, '-5.7');
      tb('1', '1', 1, '-Infinity');
      tb('NaN', '1', 1, '0');
      tb('0', '1', 1, '1');
      tb('1', '1', 1, '3');
      tb('1', '1', 1, '5.7');
      tb('1', '1', 1, 'Infinity');
      tb('NaN', '1', 1, 'NaN');
      tb('0.33333333333333333', '3', -1, '-1');
      tb('0.33333333333333333', '3', -1, '-3');
      tb('0.33333333333333333', '3', -1, '-5.7');
      tb('0.33333333333333333', '3', -1, '-Infinity');
      tb('NaN', '3', -1, '0');
      tb('0.33333333333333333', '3', -1, '1');
      tb('0.33333333333333333', '3', -1, '3');
      tb('0.33333333333333333', '3', -1, '5.7');
      tb('0.33333333333333333', '3', -1, 'Infinity');
      tb('NaN', '3', -1, 'NaN');
      tb('0.03703703703703704', '3', -3, '-1');
      tb('0.03703703703703704', '3', -3, '-3');
      tb('0.03703703703703704', '3', -3, '-5.7');
      tb('0.03703703703703704', '3', -3, '-Infinity');
      tb('NaN', '3', -3, '0');
      tb('0.03703703703703704', '3', -3, '1');
      tb('0.03703703703703704', '3', -3, '3');
      tb('0.03703703703703704', '3', -3, '5.7');
      tb('0.03703703703703704', '3', -3, 'Infinity');
      tb('NaN', '3', -3, 'NaN');
      tb('0.00411522633744856', '3', -5, '-1');
      tb('0.00411522633744856', '3', -5, '-3');
      tb('0.00411522633744856', '3', -5, '-5.7');
      tb('0.00411522633744856', '3', -5, '-Infinity');
      tb('NaN', '3', -5, '0');
      tb('0.00411522633744856', '3', -5, '1');
      tb('0.00411522633744856', '3', -5, '3');
      tb('0.00411522633744856', '3', -5, '5.7');
      tb('0.00411522633744856', '3', -5, 'Infinity');
      tb('NaN', '3', -5, 'NaN');
      tb('0', '3', 0, '-1');
      tb('1', '3', 0, '-3');
      tb('1', '3', 0, '-5.7');
      tb('1', '3', 0, '-Infinity');
      tb('NaN', '3', 0, '0');
      tb('0', '3', 0, '1');
      tb('1', '3', 0, '3');
      tb('1', '3', 0, '5.7');
      tb('1', '3', 0, 'Infinity');
      tb('NaN', '3', 0, 'NaN');
      tb('0', '3', 1, '-1');
      tb('0', '3', 1, '-3');
      tb('3', '3', 1, '-5.7');
      tb('3', '3', 1, '-Infinity');
      tb('NaN', '3', 1, '0');
      tb('0', '3', 1, '1');
      tb('0', '3', 1, '3');
      tb('3', '3', 1, '5.7');
      tb('3', '3', 1, 'Infinity');
      tb('NaN', '3', 1, 'NaN');
      tb('0', '3', 3, '-1');
      tb('0', '3', 3, '-3');
      tb('4.2', '3', 3, '-5.7');
      tb('27', '3', 3, '-Infinity');
      tb('NaN', '3', 3, '0');
      tb('0', '3', 3, '1');
      tb('0', '3', 3, '3');
      tb('4.2', '3', 3, '5.7');
      tb('27', '3', 3, 'Infinity');
      tb('NaN', '3', 3, 'NaN');
      tb('0.17543859649122807', '5.7', -1, '-1');
      tb('0.17543859649122807', '5.7', -1, '-3');
      tb('0.17543859649122807', '5.7', -1, '-5.7');
      tb('0.17543859649122807', '5.7', -1, '-Infinity');
      tb('NaN', '5.7', -1, '0');
      tb('0.17543859649122807', '5.7', -1, '1');
      tb('0.17543859649122807', '5.7', -1, '3');
      tb('0.17543859649122807', '5.7', -1, '5.7');
      tb('0.17543859649122807', '5.7', -1, 'Infinity');
      tb('NaN', '5.7', -1, 'NaN');
      tb('0.00539977212961613', '5.7', -3, '-1');
      tb('0.00539977212961613', '5.7', -3, '-3');
      tb('0.00539977212961613', '5.7', -3, '-5.7');
      tb('0.00539977212961613', '5.7', -3, '-Infinity');
      tb('NaN', '5.7', -3, '0');
      tb('0.00539977212961613', '5.7', -3, '1');
      tb('0.00539977212961613', '5.7', -3, '3');
      tb('0.00539977212961613', '5.7', -3, '5.7');
      tb('0.00539977212961613', '5.7', -3, 'Infinity');
      tb('NaN', '5.7', -3, 'NaN');
      tb('0', '5.7', 0, '-1');
      tb('1', '5.7', 0, '-3');
      tb('1', '5.7', 0, '-5.7');
      tb('1', '5.7', 0, '-Infinity');
      tb('NaN', '5.7', 0, '0');
      tb('0', '5.7', 0, '1');
      tb('1', '5.7', 0, '3');
      tb('1', '5.7', 0, '5.7');
      tb('1', '5.7', 0, 'Infinity');
      tb('NaN', '5.7', 0, 'NaN');
      tb('0.7', '5.7', 1, '-1');
      tb('2.7', '5.7', 1, '-3');
      tb('0', '5.7', 1, '-5.7');
      tb('5.7', '5.7', 1, '-Infinity');
      tb('NaN', '5.7', 1, '0');
      tb('0.7', '5.7', 1, '1');
      tb('2.7', '5.7', 1, '3');
      tb('0', '5.7', 1, '5.7');
      tb('5.7', '5.7', 1, 'Infinity');
      tb('NaN', '5.7', 1, 'NaN');
      tb('0.193', '5.7', 3, '-1');
      tb('2.193', '5.7', 3, '-3');
      tb('2.793', '5.7', 3, '-5.7');
      tb('185.193', '5.7', 3, '-Infinity');
      tb('NaN', '5.7', 3, '0');
      tb('0.193', '5.7', 3, '1');
      tb('2.193', '5.7', 3, '3');
      tb('2.793', '5.7', 3, '5.7');
      tb('185.193', '5.7', 3, 'Infinity');
      tb('NaN', '5.7', 3, 'NaN');
      tb('0', 'Infinity', -1, '-1');
      tb('0', 'Infinity', -1, '-3');
      tb('0', 'Infinity', -1, '-5.7');
      tb('0', 'Infinity', -1, '-Infinity');
      tb('NaN', 'Infinity', -1, '0');
      tb('0', 'Infinity', -1, '1');
      tb('0', 'Infinity', -1, '3');
      tb('0', 'Infinity', -1, '5.7');
      tb('0', 'Infinity', -1, 'Infinity');
      tb('NaN', 'Infinity', -1, 'NaN');
      tb('0', 'Infinity', 0, '-1');
      tb('1', 'Infinity', 0, '-3');
      tb('1', 'Infinity', 0, '-5.7');
      tb('1', 'Infinity', 0, '-Infinity');
      tb('NaN', 'Infinity', 0, '0');
      tb('0', 'Infinity', 0, '1');
      tb('1', 'Infinity', 0, '3');
      tb('1', 'Infinity', 0, '5.7');
      tb('1', 'Infinity', 0, 'Infinity');
      tb('NaN', 'Infinity', 0, 'NaN');
      tb('NaN', 'Infinity', 1, '-1');
      tb('0', 'NaN', 0, '-1');
      tb('1', 'NaN', 0, '-3');
      tb('1', 'NaN', 0, '-5.7');
      tb('1', 'NaN', 0, '-Infinity');
      tb('NaN', 'NaN', 0, '0');
      tb('0', 'NaN', 0, '1');
      tb('1', 'NaN', 0, '3');
      tb('1', 'NaN', 0, '5.7');
      tb('1', 'NaN', 0, 'Infinity');

      tb('1', '8431', 398674124, '6');
      tb('7110', '1929384198', 564, '12627');
      tb('1', '421', 969026510, '50');
      tb('18279', '503236662', 7865967220250664, '146017');
      tb('212243931', '26283', 559977785516, '438161990');
      tb('3986011', '309905614', 303248194641, '6707349');
      tb('18', '255', 235075187670817, '33');
      tb('757606', '85279549', 1, '4971879');
      tb('493022001', '1221', 339684, '1227120430');
      tb('4928', '308', 862705533, '245399');

      tb('1', '2655619', 712076, '33');
      tb('3249', '36597', 10, '4814');
      tb('24693574779382', '64756899620069', 929, '31837505671417');
      tb('4', '16138', 25, '6');
      tb('803688476775598957', '23434498424', 1004504153400006, '1552170429770308303');
      tb('2372169341110', '626', 2909120945494472, '2627700430731');
      tb('763331421', '8920455', 5401, '887776639');
      tb('43484276', '95602644', 47268, '79441540');
      tb('5184', '552490380863549826', 771646862212, '48411');
      tb('249062220104231038', '8165474757220190', 48336800, '275469974740761006');

      tb('4533624538711', '71095', 84895497, '8511056291816');
      tb('179616962799673689600', '30', 5993842570087, '3846357299605272267200');
      tb('2635639014', '948664855786186969995462', 991073259299, '6492710818');
      tb('25207202', '7062946640447932397849934745', 9179924349024, '131689081');
      tb('46215552578796', '9226321147260318', 465662072, '82890635248305');
      tb('2381', '67677914606828678309445778836', 379808346, '6545');
      tb('3194', '9430054', 33266765435198, '8086');
      tb('489391901079659061061615631695', '61', 532791104437751, '575349759754184186263817284386');
      tb('53895639062204578043630854379', '7625677354305052466464542', 384495887925, '92309679232802956732606796453');
      tb('2556', '2556', 474, '4260');

      tb('7454833596345226', '6627640799561604435379549901208146893914', 738172551780, '9927201293379475');
      tb('180534305804480057935271006266', '30118923384576', 1724057305, '217106906249791126796683884757');
      tb('40198606849673093876708023432368286', '46018377546879392378', 9583035, '97268554010071292786749920599930246');
      tb('119594913310192', '3876146908085398', 6310557700917, '460635614054751');
      tb('124164038822218003447569', '6324437543304', 5145398258501, '185457603447664741003595');
      tb('3090727470454298372533496615424', '9043956512017564199358', 812419, '24686499729814129954773423938808');
      tb('196432807299128', '85644819061206872677771002', 2149475, '2390467883263880');
      tb('21038128225272112935718937889', '10201699689699', 975439792, '552736938894180564012881397228');
      tb('48815091877022922', '819772006700', 27, '92801123950463822');
      tb('3428327713', '4783442049811351657', 763298409739419, '4611091548');

      tb('13332959', '50223861853248559483171199', 433657796167153, '14302445');
      tb('1671780604656974600625', '5262390185', 237568007998, '2996619244329632717320');
      tb('163214427140868907633628729899294561', '69729', 5547, '348074057682137097650725573316845631');
      tb('1431482931095017928787410350478464311370783', '324036022719', 741179, '1926651417082887424580613612432908230284256');
      tb('2066482089348451048557491058810559698377957', '485499449712405070079531', 26619244686, '5198031511981114390451723050087908159382379');
      tb('230132104292091', '51108', 72, '300839508488483');
      tb('77425469643841456', '683612', 1358712956, '87679547089722516');
      tb('19704951483426394285654701761857', '648220087103027691231', 951, '51871772124455644390524635948707');
      tb('49664718770671', '90754235859251032779427547330178026902879259879149', 56465, '88662672119247');
      tb('5850177638872804389781733677', '43833993637925773026276875024526870636161009', 18680, '7143233335762749555439764903');

      tb('36126', '6', '30313', '46770');
      tb('305633', '9', '492182', '595684');
      tb('1', '7641905', '7360346', '96');
      tb('0', '8102411', '30688840', '1');
      tb('0', '693992935', '451540849', '5');
      tb('6218780', '688520122', '2871742644', '8796707');
      tb('188', '6117', '12332568054', '197');
      tb('169', '48919674343', '683481923100', '686');
      tb('127963776', '246056', '9993177131270', '171031870');
      tb('44758997442869', '717', '49018334050029', '69390201825586');
      tb('185434090027004', '3204165044382', '177830725390829', '533879968467436');
      tb('1636361', '446', '1191585862541952', '2033593');
      tb('32876147411634979', '473417559', '41651896882701980', '98041110944345173');
      tb('36047604560818', '773294275250609', '386465744598168787', '50006210156471');
      tb('361137861593703', '13244255729639', '1911484136131299703', '662563068256582');
      tb('1', '609739021177711600', '72297886219104209891', '3');
      tb('70003587481041693', '6116577', '387527631298650918625', '73188864807228334');
      tb('59', '414707', '1311336295171970832319', '3834');
      tb('557222551695', '289971034958008', '72855336044532499166157', '1126587401089');
      tb('689', '4573992158612', '356143103736280634562673', '5429');
      tb('25407', '54249087', '6195599464066834683297493', '73920');
      tb('3785887454173764209502', '92006966552', '61565817333575715274034140', '61314028114281538772486');
      tb('1541435034857375759494843', '946399', '133610173441656552818672857', '4868620034450140054489972');
      tb('5398747450367028', '5115300314063699339178', '5632357854798566697113473917', '8379593179369140');
      tb('180370444832', '8', '79273223664738060453489483507', '1128783929036');
      tb('36241', '369', '474014470821066710327438847753', '75664');
      tb('3161951032076426124544', '6762109940816531', '1534263043482451766473278741858', '7423962065376631352231');
      tb('1281292887696886550187936197335', '30927801517', '51296625206724082475117595408996', '1829766164960161123900191315839');
      tb('515074912159', '34856033499', '680211532871487005592894533276371', '757248324190');
      tb('436358152', '946396882132401577278', '8836696379185696318009986585645395', '623395130');
      tb('16', '3310500965274958912524667', '47962935101128815165904036733909432', '17');
      tb('647888585530921', '5', '471891861800978235667401173790419366', '4641236461015776');
      tb('75472044635436', '6129966936', '5455884185341473747842521165846264735', '275718907361897');
      tb('3924733361393363824856369763847579', '42369471418756230809882131977', '42666120255589889046256535534890232647', '7932396854039017236651172522627067');
      tb('500297504643', '20', '508356366570258756297402522141566883041', '6483672361141');
      tb('8893902', '68759083071554', '7658087159877665775510099905346777315313', '18114658');

      // % 0

      // 0
      tb('NaN', 0, +0, 0);
      tb('NaN', 0, -0, 0);
      tb('NaN', 0, 1, 0);
      tb('NaN', 0, 2, 0);
      tb('NaN', 0, -1, 0);
      tb('NaN', 0, -2, 0);
      tb('NaN', 0, Number.NaN, 0);
      tb('NaN', 0, Number.POSITIVE_INFINITY, 0);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, 0);

      //-0
      tb('NaN', -0, +0, 0);
      tb('NaN', -0, -0, 0);
      tb('NaN', -0, 1, 0);
      tb('NaN', -0, 2, 0);
      tb('NaN', -0, -1, 0);
      tb('NaN', -0, -2, 0);
      tb('NaN', -0, Number.NaN, 0);
      tb('NaN', -0, Number.POSITIVE_INFINITY, 0);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, 0);

      // 1
      tb('NaN', 1, +0, 0);
      tb('NaN', 1, -0, 0);
      tb('NaN', 1, 1, 0);
      tb('NaN', 1, 2, 0);
      tb('NaN', 1, -1, 0);
      tb('NaN', 1, -2, 0);
      tb('NaN', 1, Number.NaN, 0);
      tb('NaN', 1, Number.POSITIVE_INFINITY, 0);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, 0);

      // 2
      tb('NaN', 2, +0, 0);
      tb('NaN', 2, -0, 0);
      tb('NaN', 2, 1, 0);
      tb('NaN', 2, 2, 0);
      tb('NaN', 2, -1, 0);
      tb('NaN', 2, -2, 0);
      tb('NaN', 2, Number.NaN, 0);
      tb('NaN', 2, Number.POSITIVE_INFINITY, 0);
      tb('NaN', 2, Number.NEGATIVE_INFINITY, 0);

      // -1
      tb('NaN', -1, +0, 0);
      tb('NaN', -1, -0, 0);
      tb('NaN', -1, 1, 0);
      tb('NaN', -1, 2, 0);
      tb('NaN', -1, -1, 0);
      tb('NaN', -1, -2, 0);
      tb('NaN', -1, Number.NaN, 0);
      tb('NaN', -1, Number.POSITIVE_INFINITY, 0);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, 0);

      // -2
      tb('NaN', -2, +0, 0);
      tb('NaN', -2, -0, 0);
      tb('NaN', -2, 1, 0);
      tb('NaN', -2, 2, 0);
      tb('NaN', -2, -1, 0);
      tb('NaN', -2, -2, 0);
      tb('NaN', -2, Number.NaN, 0);
      tb('NaN', -2, Number.POSITIVE_INFINITY, 0);
      tb('NaN', -2, Number.NEGATIVE_INFINITY, 0);

      // Number.NaN
      tb('NaN', Number.NaN, +0, 0);
      tb('NaN', Number.NaN, -0, 0);
      tb('NaN', Number.NaN, 1, 0);
      tb('NaN', Number.NaN, 2, 0);
      tb('NaN', Number.NaN, -1, 0);
      tb('NaN', Number.NaN, -2, 0);
      tb('NaN', Number.NaN, Number.NaN, 0);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, 0);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, 0);

      // Number.POSITIVE_INFINITY
      tb('NaN', Number.POSITIVE_INFINITY, +0, 0);
      tb('NaN', Number.POSITIVE_INFINITY, -0, 0);
      tb('NaN', Number.POSITIVE_INFINITY, 1, 0);
      tb('NaN', Number.POSITIVE_INFINITY, 2, 0);
      tb('NaN', Number.POSITIVE_INFINITY, -1, 0);
      tb('NaN', Number.POSITIVE_INFINITY, -2, 0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, 0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, 0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 0);

      // Number.NEGATIVE_INFINITY
      tb('NaN', Number.NEGATIVE_INFINITY, +0, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, -0, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, -1, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, -2, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, 0);

      // % -0

      // 0
      tb('NaN', 0, +0, -0);
      tb('NaN', 0, -0, -0);
      tb('NaN', 0, 1, -0);
      tb('NaN', 0, 2, -0);
      tb('NaN', 0, -1, -0);
      tb('NaN', 0, -2, -0);
      tb('NaN', 0, Number.NaN, -0);
      tb('NaN', 0, Number.POSITIVE_INFINITY, -0);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, -0);

      //-0
      tb('NaN', -0, +0, -0);
      tb('NaN', -0, -0, -0);
      tb('NaN', -0, 1, -0);
      tb('NaN', -0, 2, -0);
      tb('NaN', -0, -1, -0);
      tb('NaN', -0, -2, -0);
      tb('NaN', -0, Number.NaN, -0);
      tb('NaN', -0, Number.POSITIVE_INFINITY, -0);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, -0);

      // 1
      tb('NaN', 1, +0, -0);
      tb('NaN', 1, -0, -0);
      tb('NaN', 1, 1, -0);
      tb('NaN', 1, 2, -0);
      tb('NaN', 1, -1, -0);
      tb('NaN', 1, -2, -0);
      tb('NaN', 1, Number.NaN, -0);
      tb('NaN', 1, Number.POSITIVE_INFINITY, -0);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, -0);

      // 2
      tb('NaN', 2, +0, -0);
      tb('NaN', 2, -0, -0);
      tb('NaN', 2, 1, -0);
      tb('NaN', 2, 2, -0);
      tb('NaN', 2, -1, -0);
      tb('NaN', 2, -2, -0);
      tb('NaN', 2, Number.NaN, -0);
      tb('NaN', 2, Number.POSITIVE_INFINITY, -0);
      tb('NaN', 2, Number.NEGATIVE_INFINITY, -0);

      // -1
      tb('NaN', -1, +0, -0);
      tb('NaN', -1, -0, -0);
      tb('NaN', -1, 1, -0);
      tb('NaN', -1, 2, -0);
      tb('NaN', -1, -1, -0);
      tb('NaN', -1, -2, -0);
      tb('NaN', -1, Number.NaN, -0);
      tb('NaN', -1, Number.POSITIVE_INFINITY, -0);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, -0);

      // -2
      tb('NaN', -2, +0, -0);
      tb('NaN', -2, -0, -0);
      tb('NaN', -2, 1, -0);
      tb('NaN', -2, 2, -0);
      tb('NaN', -2, -1, -0);
      tb('NaN', -2, -2, -0);
      tb('NaN', -2, Number.NaN, -0);
      tb('NaN', -2, Number.POSITIVE_INFINITY, -0);
      tb('NaN', -2, Number.NEGATIVE_INFINITY, -0);

      // Number.NaN
      tb('NaN', Number.NaN, +0, -0);
      tb('NaN', Number.NaN, -0, -0);
      tb('NaN', Number.NaN, 1, -0);
      tb('NaN', Number.NaN, 2, -0);
      tb('NaN', Number.NaN, -1, -0);
      tb('NaN', Number.NaN, -2, -0);
      tb('NaN', Number.NaN, Number.NaN, -0);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, -0);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, -0);

      // Number.POSITIVE_INFINITY
      tb('NaN', Number.POSITIVE_INFINITY, +0, -0);
      tb('NaN', Number.POSITIVE_INFINITY, -0, -0);
      tb('NaN', Number.POSITIVE_INFINITY, 1, -0);
      tb('NaN', Number.POSITIVE_INFINITY, 2, -0);
      tb('NaN', Number.POSITIVE_INFINITY, -1, -0);
      tb('NaN', Number.POSITIVE_INFINITY, -2, -0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, -0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, -0);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, -0);

      // Number.NEGATIVE_INFINITY
      tb('NaN', Number.NEGATIVE_INFINITY, +0, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, -0, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, -1, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, -2, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, -0);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, -0);

      // % 1

      // 0
      tb('0', 0, +0, 1);
      tb('0', 0, -0, 1);
      tb('0', 0, 1, 1);
      tb('0', 0, 2, 1);
      tb('NaN', 0, -1, 1);
      tb('NaN', 0, -2, 1);
      tb('NaN', 0, Number.NaN, 1);
      tb('0', 0, Number.POSITIVE_INFINITY, 1);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, 1);

      //-0
      tb('0', -0, +0, 1);
      tb('0', -0, -0, 1);
      tb('-0', -0, 1, 1);
      tb('0', -0, 2, 1);
      tb('NaN', -0, -1, 1);
      tb('NaN', -0, -2, 1);
      tb('NaN', -0, Number.NaN, 1);
      tb('0', -0, Number.POSITIVE_INFINITY, 1);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, 1);

      // 1
      tb('0', 1, +0, 1);
      tb('0', 1, -0, 1);
      tb('0', 1, 1, 1);
      tb('0', 1, 2, 1);
      tb('0', 1, -1, 1);
      tb('0', 1, -2, 1);
      tb('NaN', 1, Number.NaN, 1);
      tb('NaN', 1, Number.POSITIVE_INFINITY, 1);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, 1);

      // 2
      tb('0', 2, +0, 1);
      tb('0', 2, -0, 1);
      tb('0', 2, 1, 1);
      tb('0', 2, 2, 1);
      tb('0.5', 2, -1, 1);
      tb('0.25', 2, -2, 1);
      tb('NaN', 2, Number.NaN, 1);
      tb('NaN', 2, Number.POSITIVE_INFINITY, 1);
      tb('0', 2, Number.NEGATIVE_INFINITY, 1);

      // -1
      tb('0', -1, +0, 1);
      tb('0', -1, -0, 1);
      tb('-0', -1, 1, 1);
      tb('0', -1, 2, 1);
      tb('-0', -1, -1, 1);
      tb('0', -1, -2, 1);
      tb('NaN', -1, Number.NaN, 1);
      tb('NaN', -1, Number.POSITIVE_INFINITY, 1);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, 1);

      // -2
      tb('0', -2, +0, 1);
      tb('0', -2, -0, 1);
      tb('-0', -2, 1, 1);
      tb('0', -2, 2, 1);
      tb('-0.5', -2, -1, 1);
      tb('0.25', -2, -2, 1);
      tb('NaN', -2, Number.NaN, 1);
      tb('NaN', -2, Number.POSITIVE_INFINITY, 1);
      tb('0', -2, Number.NEGATIVE_INFINITY, 1);

      // Number.NaN
      tb('0', Number.NaN, +0, 1);
      tb('0', Number.NaN, -0, 1);
      tb('NaN', Number.NaN, 1, 1);
      tb('NaN', Number.NaN, 2, 1);
      tb('NaN', Number.NaN, -1, 1);
      tb('NaN', Number.NaN, -2, 1);
      tb('NaN', Number.NaN, Number.NaN, 1);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, 1);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, 1);

      // Number.POSITIVE_INFINITY
      tb('0', Number.POSITIVE_INFINITY, +0, 1);
      tb('0', Number.POSITIVE_INFINITY, -0, 1);
      tb('NaN', Number.POSITIVE_INFINITY, 1, 1);
      tb('NaN', Number.POSITIVE_INFINITY, 2, 1);
      tb('0', Number.POSITIVE_INFINITY, -1, 1);
      tb('0', Number.POSITIVE_INFINITY, -2, 1);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, 1);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, 1);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 1);

      // Number.NEGATIVE_INFINITY
      tb('0', Number.NEGATIVE_INFINITY, +0, 1);
      tb('0', Number.NEGATIVE_INFINITY, -0, 1);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, 1);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, 1);
      tb('-0', Number.NEGATIVE_INFINITY, -1, 1);
      tb('0', Number.NEGATIVE_INFINITY, -2, 1);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, 1);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, 1);

      // % 2

      // 0
      tb('1', 0, +0, 2);
      tb('1', 0, -0, 2);
      tb('0', 0, 1, 2);
      tb('0', 0, 2, 2);
      tb('NaN', 0, -1, 2);
      tb('NaN', 0, -2, 2);
      tb('NaN', 0, Number.NaN, 2);
      tb('0', 0, Number.POSITIVE_INFINITY, 2);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, 2);

      //-0
      tb('1', -0, +0, 2);
      tb('1', -0, -0, 2);
      tb('-0', -0, 1, 2);
      tb('0', -0, 2, 2);
      tb('NaN', -0, -1, 2);
      tb('NaN', -0, -2, 2);
      tb('NaN', -0, Number.NaN, 2);
      tb('0', -0, Number.POSITIVE_INFINITY, 2);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, 2);

      // 1
      tb('1', 1, +0, 2);
      tb('1', 1, -0, 2);
      tb('1', 1, 1, 2);
      tb('1', 1, 2, 2);
      tb('1', 1, -1, 2);
      tb('1', 1, -2, 2);
      tb('NaN', 1, Number.NaN, 2);
      tb('NaN', 1, Number.POSITIVE_INFINITY, 2);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, 2);

      // 2
      tb('1', 2, +0, 2);
      tb('1', 2, -0, 2);
      tb('0', 2, 1, 2);
      tb('0', 2, 2, 2);
      tb('0.5', 2, -1, 2);
      tb('0.25', 2, -2, 2);
      tb('NaN', 2, Number.NaN, 2);
      tb('NaN', 2, Number.POSITIVE_INFINITY, 2);
      tb('0', 2, Number.NEGATIVE_INFINITY, 2);

      // -1
      tb('1', -1, +0, 2);
      tb('1', -1, -0, 2);
      tb('-1', -1, 1, 2);
      tb('1', -1, 2, 2);
      tb('-1', -1, -1, 2);
      tb('1', -1, -2, 2);
      tb('NaN', -1, Number.NaN, 2);
      tb('NaN', -1, Number.POSITIVE_INFINITY, 2);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, 2);

      // -2
      tb('1', -2, +0, 2);
      tb('1', -2, -0, 2);
      tb('-0', -2, 1, 2);
      tb('0', -2, 2, 2);
      tb('-0.5', -2, -1, 2);
      tb('0.25', -2, -2, 2);
      tb('NaN', -2, Number.NaN, 2);
      tb('NaN', -2, Number.POSITIVE_INFINITY, 2);
      tb('0', -2, Number.NEGATIVE_INFINITY, 2);

      // Number.NaN
      tb('1', Number.NaN, +0, 2);
      tb('1', Number.NaN, -0, 2);
      tb('NaN', Number.NaN, 1, 2);
      tb('NaN', Number.NaN, 2, 2);
      tb('NaN', Number.NaN, -1, 2);
      tb('NaN', Number.NaN, -2, 2);
      tb('NaN', Number.NaN, Number.NaN, 2);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, 2);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, 2);

      // Number.POSITIVE_INFINITY
      tb('1', Number.POSITIVE_INFINITY, +0, 2);
      tb('1', Number.POSITIVE_INFINITY, -0, 2);
      tb('NaN', Number.POSITIVE_INFINITY, 1, 2);
      tb('NaN', Number.POSITIVE_INFINITY, 2, 2);
      tb('0', Number.POSITIVE_INFINITY, -1, 2);
      tb('0', Number.POSITIVE_INFINITY, -2, 2);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, 2);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, 2);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 2);

      // Number.NEGATIVE_INFINITY
      tb('1', Number.NEGATIVE_INFINITY, +0, 2);
      tb('1', Number.NEGATIVE_INFINITY, -0, 2);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, 2);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, 2);
      tb('-0', Number.NEGATIVE_INFINITY, -1, 2);
      tb('0', Number.NEGATIVE_INFINITY, -2, 2);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, 2);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 2);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, 2);

      // % -1

      // 0
      tb('0', 0, +0, -1);
      tb('0', 0, -0, -1);
      tb('0', 0, 1, -1);
      tb('0', 0, 2, -1);
      tb('NaN', 0, -1, -1);
      tb('NaN', 0, -2, -1);
      tb('NaN', 0, Number.NaN, -1);
      tb('0', 0, Number.POSITIVE_INFINITY, -1);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, -1);

      //-0
      tb('0', -0, +0, -1);
      tb('0', -0, -0, -1);
      tb('-0', -0, 1, -1);
      tb('0', -0, 2, -1);
      tb('NaN', -0, -1, -1);
      tb('NaN', -0, -2, -1);
      tb('NaN', -0, Number.NaN, -1);
      tb('0', -0, Number.POSITIVE_INFINITY, -1);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, -1);

      // 1
      tb('0', 1, +0, -1);
      tb('0', 1, -0, -1);
      tb('0', 1, 1, -1);
      tb('0', 1, 2, -1);
      tb('0', 1, -1, -1);
      tb('0', 1, -2, -1);
      tb('NaN', 1, Number.NaN, -1);
      tb('NaN', 1, Number.POSITIVE_INFINITY, -1);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, -1);

      // 2
      tb('0', 2, +0, -1);
      tb('0', 2, -0, -1);
      tb('0', 2, 1, -1);
      tb('0', 2, 2, -1);
      tb('0.5', 2, -1, -1);
      tb('0.25', 2, -2, -1);
      tb('NaN', 2, Number.NaN, -1);
      tb('NaN', 2, Number.POSITIVE_INFINITY, -1);
      tb('0', 2, Number.NEGATIVE_INFINITY, -1);

      // -1
      tb('0', -1, +0, -1);
      tb('0', -1, -0, -1);
      tb('-0', -1, 1, -1);
      tb('0', -1, 2, -1);
      tb('-0', -1, -1, -1);
      tb('0', -1, -2, -1);
      tb('NaN', -1, Number.NaN, -1);
      tb('NaN', -1, Number.POSITIVE_INFINITY, -1);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, -1);

      // -2
      tb('0', -2, +0, -1);
      tb('0', -2, -0, -1);
      tb('-0', -2, 1, -1);
      tb('0', -2, 2, -1);
      tb('-0.5', -2, -1, -1);
      tb('0.25', -2, -2, -1);
      tb('NaN', -2, Number.NaN, -1);
      tb('NaN', -2, Number.POSITIVE_INFINITY, -1);
      tb('0', -2, Number.NEGATIVE_INFINITY, -1);

      // Number.NaN
      tb('0', Number.NaN, +0, -1);
      tb('0', Number.NaN, -0, -1);
      tb('NaN', Number.NaN, 1, -1);
      tb('NaN', Number.NaN, 2, -1);
      tb('NaN', Number.NaN, -1, -1);
      tb('NaN', Number.NaN, -2, -1);
      tb('NaN', Number.NaN, Number.NaN, -1);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, -1);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, -1);

      // Number.POSITIVE_INFINITY
      tb('0', Number.POSITIVE_INFINITY, +0, -1);
      tb('0', Number.POSITIVE_INFINITY, -0, -1);
      tb('NaN', Number.POSITIVE_INFINITY, 1, -1);
      tb('NaN', Number.POSITIVE_INFINITY, 2, -1);
      tb('0', Number.POSITIVE_INFINITY, -1, -1);
      tb('0', Number.POSITIVE_INFINITY, -2, -1);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, -1);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, -1);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, -1);

      // Number.NEGATIVE_INFINITY
      tb('0', Number.NEGATIVE_INFINITY, +0, -1);
      tb('0', Number.NEGATIVE_INFINITY, -0, -1);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, -1);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, -1);
      tb('-0', Number.NEGATIVE_INFINITY, -1, -1);
      tb('0', Number.NEGATIVE_INFINITY, -2, -1);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, -1);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, -1);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, -1);

      // % -2

      // 0
      tb('1', 0, +0, -2);
      tb('1', 0, -0, -2);
      tb('0', 0, 1, -2);
      tb('0', 0, 2, -2);
      tb('NaN', 0, -1, -2);
      tb('NaN', 0, -2, -2);
      tb('NaN', 0, Number.NaN, -2);
      tb('0', 0, Number.POSITIVE_INFINITY, -2);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, -2);

      //-0
      tb('1', -0, +0, -2);
      tb('1', -0, -0, -2);
      tb('-0', -0, 1, -2);
      tb('0', -0, 2, -2);
      tb('NaN', -0, -1, -2);
      tb('NaN', -0, -2, -2);
      tb('NaN', -0, Number.NaN, -2);
      tb('0', -0, Number.POSITIVE_INFINITY, -2);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, -2);

      // 1
      tb('1', 1, +0, -2);
      tb('1', 1, -0, -2);
      tb('1', 1, 1, -2);
      tb('1', 1, 2, -2);
      tb('1', 1, -1, -2);
      tb('1', 1, -2, -2);
      tb('NaN', 1, Number.NaN, -2);
      tb('NaN', 1, Number.POSITIVE_INFINITY, -2);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, -2);

      // 2
      tb('1', 2, +0, -2);
      tb('1', 2, -0, -2);
      tb('0', 2, 1, -2);
      tb('0', 2, 2, -2);
      tb('0.5', 2, -1, -2);
      tb('0.25', 2, -2, -2);
      tb('NaN', 2, Number.NaN, -2);
      tb('NaN', 2, Number.POSITIVE_INFINITY, -2);
      tb('0', 2, Number.NEGATIVE_INFINITY, -2);

      // -1
      tb('1', -1, +0, -2);
      tb('1', -1, -0, -2);
      tb('-1', -1, 1, -2);
      tb('1', -1, 2, -2);
      tb('-1', -1, -1, -2);
      tb('1', -1, -2, -2);
      tb('NaN', -1, Number.NaN, -2);
      tb('NaN', -1, Number.POSITIVE_INFINITY, -2);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, -2);

      // -2
      tb('1', -2, +0, -2);
      tb('1', -2, -0, -2);
      tb('-0', -2, 1, -2);
      tb('0', -2, 2, -2);
      tb('-0.5', -2, -1, -2);
      tb('0.25', -2, -2, -2);
      tb('NaN', -2, Number.NaN, -2);
      tb('NaN', -2, Number.POSITIVE_INFINITY, -2);
      tb('0', -2, Number.NEGATIVE_INFINITY, -2);

      // Number.NaN
      tb('1', Number.NaN, +0, -2);
      tb('1', Number.NaN, -0, -2);
      tb('NaN', Number.NaN, 1, -2);
      tb('NaN', Number.NaN, 2, -2);
      tb('NaN', Number.NaN, -1, -2);
      tb('NaN', Number.NaN, -2, -2);
      tb('NaN', Number.NaN, Number.NaN, -2);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, -2);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, -2);

      // Number.POSITIVE_INFINITY
      tb('1', Number.POSITIVE_INFINITY, +0, -2);
      tb('1', Number.POSITIVE_INFINITY, -0, -2);
      tb('NaN', Number.POSITIVE_INFINITY, 1, -2);
      tb('NaN', Number.POSITIVE_INFINITY, 2, -2);
      tb('0', Number.POSITIVE_INFINITY, -1, -2);
      tb('0', Number.POSITIVE_INFINITY, -2, -2);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, -2);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, -2);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, -2);

      // Number.NEGATIVE_INFINITY
      tb('1', Number.NEGATIVE_INFINITY, +0, -2);
      tb('1', Number.NEGATIVE_INFINITY, -0, -2);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, -2);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, -2);
      tb('-0', Number.NEGATIVE_INFINITY, -1, -2);
      tb('0', Number.NEGATIVE_INFINITY, -2, -2);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, -2);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, -2);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, -2);

      // % Number.NaN

      // 0
      tb('NaN', 0, +0, Number.NaN);
      tb('NaN', 0, -0, Number.NaN);
      tb('NaN', 0, 1, Number.NaN);
      tb('NaN', 0, 2, Number.NaN);
      tb('NaN', 0, -1, Number.NaN);
      tb('NaN', 0, -2, Number.NaN);
      tb('NaN', 0, Number.NaN, Number.NaN);
      tb('NaN', 0, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, Number.NaN);

      //-0
      tb('NaN', -0, +0, Number.NaN);
      tb('NaN', -0, -0, Number.NaN);
      tb('NaN', -0, 1, Number.NaN);
      tb('NaN', -0, 2, Number.NaN);
      tb('NaN', -0, -1, Number.NaN);
      tb('NaN', -0, -2, Number.NaN);
      tb('NaN', -0, Number.NaN, Number.NaN);
      tb('NaN', -0, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, Number.NaN);

      // 1
      tb('NaN', 1, +0, Number.NaN);
      tb('NaN', 1, -0, Number.NaN);
      tb('NaN', 1, 1, Number.NaN);
      tb('NaN', 1, 2, Number.NaN);
      tb('NaN', 1, -1, Number.NaN);
      tb('NaN', 1, -2, Number.NaN);
      tb('NaN', 1, Number.NaN, Number.NaN);
      tb('NaN', 1, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, Number.NaN);

      // 2
      tb('NaN', 2, +0, Number.NaN);
      tb('NaN', 2, -0, Number.NaN);
      tb('NaN', 2, 1, Number.NaN);
      tb('NaN', 2, 2, Number.NaN);
      tb('NaN', 2, -1, Number.NaN);
      tb('NaN', 2, -2, Number.NaN);
      tb('NaN', 2, Number.NaN, Number.NaN);
      tb('NaN', 2, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', 2, Number.NEGATIVE_INFINITY, Number.NaN);

      // -1
      tb('NaN', -1, +0, Number.NaN);
      tb('NaN', -1, -0, Number.NaN);
      tb('NaN', -1, 1, Number.NaN);
      tb('NaN', -1, 2, Number.NaN);
      tb('NaN', -1, -1, Number.NaN);
      tb('NaN', -1, -2, Number.NaN);
      tb('NaN', -1, Number.NaN, Number.NaN);
      tb('NaN', -1, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, Number.NaN);

      // -2
      tb('NaN', -2, +0, Number.NaN);
      tb('NaN', -2, -0, Number.NaN);
      tb('NaN', -2, 1, Number.NaN);
      tb('NaN', -2, 2, Number.NaN);
      tb('NaN', -2, -1, Number.NaN);
      tb('NaN', -2, -2, Number.NaN);
      tb('NaN', -2, Number.NaN, Number.NaN);
      tb('NaN', -2, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', -2, Number.NEGATIVE_INFINITY, Number.NaN);

      // Number.NaN
      tb('NaN', Number.NaN, +0, Number.NaN);
      tb('NaN', Number.NaN, -0, Number.NaN);
      tb('NaN', Number.NaN, 1, Number.NaN);
      tb('NaN', Number.NaN, 2, Number.NaN);
      tb('NaN', Number.NaN, -1, Number.NaN);
      tb('NaN', Number.NaN, -2, Number.NaN);
      tb('NaN', Number.NaN, Number.NaN, Number.NaN);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, Number.NaN);

      // Number.POSITIVE_INFINITY
      tb('NaN', Number.POSITIVE_INFINITY, +0, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, -0, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, 1, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, 2, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, -1, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, -2, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NaN);

      // Number.NEGATIVE_INFINITY
      tb('NaN', Number.NEGATIVE_INFINITY, +0, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, -0, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, -1, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, -2, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NaN);

      // % Number.POSITIVE_INFINITY

      // 0
      tb('1', 0, +0, Number.POSITIVE_INFINITY);
      tb('1', 0, -0, Number.POSITIVE_INFINITY);
      tb('0', 0, 1, Number.POSITIVE_INFINITY);
      tb('0', 0, 2, Number.POSITIVE_INFINITY);
      tb('NaN', 0, -1, Number.POSITIVE_INFINITY);
      tb('NaN', 0, -2, Number.POSITIVE_INFINITY);
      tb('NaN', 0, Number.NaN, Number.POSITIVE_INFINITY);
      tb('0', 0, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      //-0
      tb('1', -0, +0, Number.POSITIVE_INFINITY);
      tb('1', -0, -0, Number.POSITIVE_INFINITY);
      tb('-0', -0, 1, Number.POSITIVE_INFINITY);
      tb('0', -0, 2, Number.POSITIVE_INFINITY);
      tb('NaN', -0, -1, Number.POSITIVE_INFINITY);
      tb('NaN', -0, -2, Number.POSITIVE_INFINITY);
      tb('NaN', -0, Number.NaN, Number.POSITIVE_INFINITY);
      tb('0', -0, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // 1
      tb('1', 1, +0, Number.POSITIVE_INFINITY);
      tb('1', 1, -0, Number.POSITIVE_INFINITY);
      tb('1', 1, 1, Number.POSITIVE_INFINITY);
      tb('1', 1, 2, Number.POSITIVE_INFINITY);
      tb('1', 1, -1, Number.POSITIVE_INFINITY);
      tb('1', 1, -2, Number.POSITIVE_INFINITY);
      tb('NaN', 1, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', 1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // 2
      tb('1', 2, +0, Number.POSITIVE_INFINITY);
      tb('1', 2, -0, Number.POSITIVE_INFINITY);
      tb('2', 2, 1, Number.POSITIVE_INFINITY);
      tb('4', 2, 2, Number.POSITIVE_INFINITY);
      tb('0.5', 2, -1, Number.POSITIVE_INFINITY);
      tb('0.25', 2, -2, Number.POSITIVE_INFINITY);
      tb('NaN', 2, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', 2, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('0', 2, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // -1
      tb('1', -1, +0, Number.POSITIVE_INFINITY);
      tb('1', -1, -0, Number.POSITIVE_INFINITY);
      tb('-1', -1, 1, Number.POSITIVE_INFINITY);
      tb('1', -1, 2, Number.POSITIVE_INFINITY);
      tb('-1', -1, -1, Number.POSITIVE_INFINITY);
      tb('1', -1, -2, Number.POSITIVE_INFINITY);
      tb('NaN', -1, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', -1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // -2
      tb('1', -2, +0, Number.POSITIVE_INFINITY);
      tb('1', -2, -0, Number.POSITIVE_INFINITY);
      tb('-2', -2, 1, Number.POSITIVE_INFINITY);
      tb('4', -2, 2, Number.POSITIVE_INFINITY);
      tb('-0.5', -2, -1, Number.POSITIVE_INFINITY);
      tb('0.25', -2, -2, Number.POSITIVE_INFINITY);
      tb('NaN', -2, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', -2, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('0', -2, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // Number.NaN
      tb('1', Number.NaN, +0, Number.POSITIVE_INFINITY);
      tb('1', Number.NaN, -0, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, 1, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, 2, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, -1, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, -2, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // Number.POSITIVE_INFINITY
      tb('1', Number.POSITIVE_INFINITY, +0, Number.POSITIVE_INFINITY);
      tb('1', Number.POSITIVE_INFINITY, -0, Number.POSITIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, 1, Number.POSITIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, 2, Number.POSITIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, -1, Number.POSITIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, -2, Number.POSITIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // Number.NEGATIVE_INFINITY
      tb('1', Number.NEGATIVE_INFINITY, +0, Number.POSITIVE_INFINITY);
      tb('1', Number.NEGATIVE_INFINITY, -0, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, Number.POSITIVE_INFINITY);
      tb('-0', Number.NEGATIVE_INFINITY, -1, Number.POSITIVE_INFINITY);
      tb('0', Number.NEGATIVE_INFINITY, -2, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, Number.POSITIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);

      // % Number.NEGATIVE_INFINITY

      // 0
      tb('1', 0, +0, Number.NEGATIVE_INFINITY);
      tb('1', 0, -0, Number.NEGATIVE_INFINITY);
      tb('0', 0, 1, Number.NEGATIVE_INFINITY);
      tb('0', 0, 2, Number.NEGATIVE_INFINITY);
      tb('NaN', 0, -1, Number.NEGATIVE_INFINITY);
      tb('NaN', 0, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', 0, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('0', 0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('NaN', 0, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      //-0
      tb('1', -0, +0, Number.NEGATIVE_INFINITY);
      tb('1', -0, -0, Number.NEGATIVE_INFINITY);
      tb('-0', -0, 1, Number.NEGATIVE_INFINITY);
      tb('0', -0, 2, Number.NEGATIVE_INFINITY);
      tb('NaN', -0, -1, Number.NEGATIVE_INFINITY);
      tb('NaN', -0, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', -0, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('0', -0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('NaN', -0, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // 1
      tb('1', 1, +0, Number.NEGATIVE_INFINITY);
      tb('1', 1, -0, Number.NEGATIVE_INFINITY);
      tb('1', 1, 1, Number.NEGATIVE_INFINITY);
      tb('1', 1, 2, Number.NEGATIVE_INFINITY);
      tb('1', 1, -1, Number.NEGATIVE_INFINITY);
      tb('1', 1, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', 1, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', 1, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('NaN', 1, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // 2
      tb('1', 2, +0, Number.NEGATIVE_INFINITY);
      tb('1', 2, -0, Number.NEGATIVE_INFINITY);
      tb('2', 2, 1, Number.NEGATIVE_INFINITY);
      tb('4', 2, 2, Number.NEGATIVE_INFINITY);
      tb('0.5', 2, -1, Number.NEGATIVE_INFINITY);
      tb('0.25', 2, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', 2, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', 2, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('0', 2, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // -1
      tb('1', -1, +0, Number.NEGATIVE_INFINITY);
      tb('1', -1, -0, Number.NEGATIVE_INFINITY);
      tb('-1', -1, 1, Number.NEGATIVE_INFINITY);
      tb('1', -1, 2, Number.NEGATIVE_INFINITY);
      tb('-1', -1, -1, Number.NEGATIVE_INFINITY);
      tb('1', -1, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', -1, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', -1, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('NaN', -1, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // -2
      tb('1', -2, +0, Number.NEGATIVE_INFINITY);
      tb('1', -2, -0, Number.NEGATIVE_INFINITY);
      tb('-2', -2, 1, Number.NEGATIVE_INFINITY);
      tb('4', -2, 2, Number.NEGATIVE_INFINITY);
      tb('-0.5', -2, -1, Number.NEGATIVE_INFINITY);
      tb('0.25', -2, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', -2, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', -2, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('0', -2, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // Number.NaN
      tb('1', Number.NaN, +0, Number.NEGATIVE_INFINITY);
      tb('1', Number.NaN, -0, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, 1, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, 2, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, -1, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NaN, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // Number.POSITIVE_INFINITY
      tb('1', Number.POSITIVE_INFINITY, +0, Number.NEGATIVE_INFINITY);
      tb('1', Number.POSITIVE_INFINITY, -0, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, 1, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, 2, Number.NEGATIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, -1, Number.NEGATIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('0', Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

      // Number.NEGATIVE_INFINITY
      tb('1', Number.NEGATIVE_INFINITY, +0, Number.NEGATIVE_INFINITY);
      tb('1', Number.NEGATIVE_INFINITY, -0, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, 1, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, 2, Number.NEGATIVE_INFINITY);
      tb('-0', Number.NEGATIVE_INFINITY, -1, Number.NEGATIVE_INFINITY);
      tb('0', Number.NEGATIVE_INFINITY, -2, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.NaN, Number.NEGATIVE_INFINITY);
      tb('NaN', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
      tb('0', Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    })
  })
}