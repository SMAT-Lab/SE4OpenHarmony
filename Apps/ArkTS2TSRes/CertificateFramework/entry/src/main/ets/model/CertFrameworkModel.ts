let __generate__Id: number = 0;
function generateId(): string {
    return "CertFrameworkModel_" + ++__generate__Id;
}
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import cert from '@ohos.security.cert';
import cryptoFrameWork from '@ohos.security.cryptoFramework';
import util from '@ohos.util';
import Logger from './Logger';
const TAG: string = '[CertFramework]';
let CERT_DATA = new Uint8Array([
    0x30, 0x82, 0x01, 0xb6, 0x30, 0x82, 0x01, 0x1f, 0x02, 0x14, 0x53, 0x19, 0x8b, 0x14, 0x84, 0xb7,
    0xab, 0xca, 0xe2, 0x13, 0x05, 0x16, 0xcb, 0xd6, 0x92, 0x4f, 0x9d, 0x34, 0xa6, 0x76, 0x30, 0x0d,
    0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x1a, 0x31,
    0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30,
    0x31, 0x31, 0x37, 0x31, 0x33, 0x32, 0x35, 0x35, 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x35, 0x31, 0x30,
    0x31, 0x32, 0x31, 0x33, 0x32, 0x35, 0x35, 0x33, 0x5a, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06,
    0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x52, 0x6f,
    0x6f, 0x74, 0x20, 0x43, 0x41, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81,
    0x81, 0x00, 0xe3, 0x65, 0x54, 0x13, 0xc6, 0x07, 0x31, 0x1d, 0x7e, 0xbc, 0xfc, 0x2c, 0x3d, 0xcd,
    0x54, 0x7f, 0x28, 0x05, 0xaa, 0xd6, 0xc1, 0xd0, 0x71, 0xc9, 0x33, 0x46, 0x07, 0x80, 0x6e, 0x5d,
    0xae, 0x9a, 0xcd, 0x29, 0x6b, 0xfb, 0x9b, 0x3a, 0x92, 0xee, 0x2f, 0x96, 0x29, 0x26, 0x12, 0x95,
    0x84, 0x1b, 0x5a, 0x33, 0x8a, 0x28, 0x3c, 0xa3, 0x25, 0xe7, 0x14, 0x00, 0x9f, 0xbb, 0xc2, 0x85,
    0xe6, 0x7f, 0x4d, 0x5c, 0x5e, 0xae, 0x09, 0xb4, 0x9f, 0x8a, 0x23, 0xc0, 0xb4, 0x85, 0xc3, 0x45,
    0xea, 0x82, 0x60, 0x4e, 0x90, 0xbe, 0x6c, 0x0a, 0x0b, 0xb3, 0xfb, 0x04, 0x0d, 0xcc, 0x1d, 0xea,
    0x07, 0x98, 0xa3, 0xf6, 0xdd, 0x4c, 0x16, 0x36, 0x68, 0xf9, 0x10, 0xa4, 0xf3, 0xd1, 0x5f, 0x0c,
    0x59, 0x7b, 0xe6, 0x2e, 0x94, 0xe2, 0x70, 0xbf, 0x23, 0x9d, 0xda, 0x59, 0x05, 0x04, 0xe0, 0x8e,
    0x51, 0x81, 0x02, 0x03, 0x01, 0x00, 0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
    0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0xb0, 0x3d, 0xe1, 0xd7, 0x71, 0x9a,
    0x78, 0x85, 0x6e, 0xeb, 0xd5, 0xa7, 0xdf, 0x54, 0x57, 0x55, 0x3a, 0xb9, 0x6c, 0x3a, 0x3a, 0x2c,
    0x03, 0x94, 0x6b, 0x14, 0xc2, 0x55, 0xaa, 0xbb, 0x8f, 0xc8, 0x02, 0x7a, 0x2a, 0x92, 0x5c, 0xca,
    0xf0, 0x57, 0x7b, 0x7a, 0x8b, 0x78, 0xc6, 0x3b, 0x7a, 0x95, 0x27, 0x13, 0x83, 0xb5, 0x5a, 0x84,
    0x55, 0x8d, 0xd8, 0x09, 0x0f, 0x9e, 0x88, 0x69, 0x64, 0x26, 0x5f, 0x46, 0x77, 0xff, 0x67, 0xaa,
    0x71, 0xab, 0x6a, 0x9a, 0x01, 0x16, 0xc0, 0x84, 0x13, 0x90, 0xce, 0x07, 0x30, 0xc5, 0x34, 0x3d,
    0x86, 0x8d, 0xe7, 0x3f, 0xc9, 0x2e, 0x69, 0xac, 0x83, 0x8f, 0xf0, 0x1d, 0x5a, 0x9f, 0x0e, 0x64,
    0x14, 0xd9, 0xb1, 0xa6, 0x19, 0xcf, 0xcc, 0x92, 0x08, 0xbd, 0x94, 0x18, 0xd2, 0x83, 0x6c, 0x13,
    0xb9, 0x45, 0xd8, 0x03, 0x58, 0x2d, 0xf1, 0xd6, 0xb9, 0x66,
]);
let SIGNATURE_TEXT = new Uint8Array([
    0x77, 0xb9, 0xa2, 0xfd, 0x57, 0x97, 0x66, 0xa2, 0x92, 0x73, 0x67, 0x72, 0x9d, 0x38, 0xa4, 0x72,
    0x76, 0x02, 0x54, 0x6e, 0xeb, 0x83, 0xfd, 0x1d, 0x0c, 0xf1, 0xd7, 0x55, 0x06, 0x69, 0x51, 0xb1,
    0x2f, 0xfb, 0x03, 0x60, 0x68, 0x50, 0x9b, 0x20, 0xef, 0xd4, 0xe9, 0xa2, 0xe8, 0x12, 0xb8, 0x55,
    0x59, 0x8c, 0xfe, 0xfb, 0x00, 0x1d, 0x35, 0x80, 0x0f, 0xa7, 0x1c, 0xea, 0xde, 0xe2, 0x68, 0xe6,
    0x12, 0xd3, 0x3e, 0xcb, 0xe8, 0x29, 0x99, 0xe5, 0x64, 0x2d, 0x99, 0xf5, 0x1b, 0x48, 0xf6, 0x0d,
    0x89, 0x48, 0xeb, 0xe6, 0x12, 0x0a, 0x8d, 0x2d, 0x48, 0xe8, 0xd6, 0x52, 0xb5, 0x5f, 0xc5, 0xe8,
    0xc1, 0x0c, 0x88, 0x5d, 0xa4, 0x57, 0x10, 0xfc, 0x50, 0x94, 0xbb, 0xb6, 0x2a, 0x17, 0xb8, 0xee,
    0xa1, 0xda, 0x0d, 0xf0, 0x63, 0x56, 0xf4, 0xc8, 0x91, 0xb2, 0xbd, 0x47, 0xfe, 0xf1, 0x34, 0x5d
]);
let STAIN_SIGNATURE_TEXT = new Uint8Array([
    0x00, 0x00, 0x11, 0x12, 0x57, 0x97, 0x61, 0xa2, 0x92, 0x73, 0x67, 0x72, 0x9d, 0x38, 0xa4, 0x72,
    0x76, 0x02, 0x54, 0x6e, 0xeb, 0x83, 0x00, 0x1d, 0x0c, 0xf1, 0xd7, 0x55, 0x06, 0x69, 0x51, 0xb1,
    0x2f, 0xfb, 0x03, 0x60, 0x68, 0x50, 0x9b, 0x20, 0xef, 0xd4, 0xe9, 0x00, 0xe8, 0x12, 0xb0, 0x55,
    0x00, 0x8c, 0xfe, 0xfb, 0x00, 0x11, 0x35, 0x80, 0x0f, 0x00, 0x00, 0x00, 0xde, 0xe6, 0x68, 0x00,
    0x00, 0xd3, 0x36, 0xcb, 0xe8, 0x29, 0x99, 0xe5, 0x64, 0x2d, 0x99, 0xf5, 0x1b, 0x48, 0xf6, 0x0d,
    0x89, 0x40, 0xeb, 0xe6, 0x12, 0x00, 0x8d, 0x2d, 0x40, 0xe8, 0xd6, 0x52, 0xb5, 0x5f, 0xc5, 0xe8,
    0xc1, 0x0c, 0x88, 0x5d, 0xa4, 0x57, 0x10, 0xfc, 0x50, 0x94, 0xbb, 0xb6, 0x2a, 0x17, 0xb8, 0xee,
    0xa1, 0xda, 0x0d, 0xf0, 0x63, 0x56, 0xf4, 0xc8, 0x91, 0xb2, 0x00, 0x47, 0x11, 0xf1, 0x44, 0x00
]);
function stringToUint8Array(str: String): Uint8Array {
    if (str.length === 0) {
        Logger.error(TAG, 'str length is 0');
        return new Uint8Array;
    }
    let len = str.length;
    let tempArray: number[] = [];
    for (let i = 0; i < len; ++i) {
        tempArray.push(str.charCodeAt(i));
    }
    let array = new Uint8Array(tempArray);
    return array;
}
/**
 * 功能模型
 */
export class CertFrameworkModel {
    // cert data
    private certEncodingBlob: certEncodingBlob = {
        data: CERT_DATA,
        encodingFormat: cert.EncodingFormat.FORMAT_DER
    };
    // origin data
    private originText: string = 'Dear Tom, can we go for a spring outing on Sunday at the Central Garden?';
    private originData: cryptoFrameWork.DataBlob = { data: stringToUint8Array(this.originText) };
    private stainOriginText: string = 'Dear Tom, can we go for a spring outing together on Monday at the lakeside garden?';
    // signature data
    private signature: cryptoFrameWork.DataBlob = { data: SIGNATURE_TEXT };
    async dataDisplay(callback: Function): Promise<void> {
        this.originData.data = stringToUint8Array(this.originText);
        this.signature.data = SIGNATURE_TEXT;
        let utilBase = new util.Base64Helper();
        let data: callbackData = new callbackData();
        data.certInfo = utilBase.encodeToStringSync(CERT_DATA);
        data.originInfo = this.originText;
        data.signatureInfo = utilBase.encodeToStringSync(SIGNATURE_TEXT);
        callback(data);
    }
    async modifyOriginData(callback: Function): Promise<void> {
        this.originData.data = stringToUint8Array(this.stainOriginText);
        this.signature.data = SIGNATURE_TEXT;
        let utilBase = new util.Base64Helper();
        let data: callbackData = new callbackData();
        data.originInfo = this.stainOriginText;
        data.signatureInfo = utilBase.encodeToStringSync(SIGNATURE_TEXT);
        callback(data);
    }
    async modifySignatureData(callback: Function): Promise<void> {
        this.originData.data = stringToUint8Array(this.originText);
        this.signature.data = STAIN_SIGNATURE_TEXT;
        let utilBase = new util.Base64Helper();
        let data: callbackData = new callbackData();
        data.originInfo = this.originText;
        data.signatureInfo = utilBase.encodeToStringSync(STAIN_SIGNATURE_TEXT);
        callback(data);
    }
    private async getPubKey(callback: Function): Promise<void> {
        let certObject: cert.X509Cert | null = null;
        let pubKey: cryptoFrameWork.PubKey;
        // create x509 cert object
        await cert.createX509Cert(this.certEncodingBlob).then((x509Cert) => {
            Logger.info(TAG, 'create x509 cert object success.');
            certObject = x509Cert;
        }).catch((err: Error) => {
            Logger.error(TAG, `create x509 cert object failed, ${JSON.stringify(err)}: ${JSON.stringify(err.message)}`);
        });
        // get pubKey from cert
        try {
            if (certObject == null) {
                Logger.error(TAG, `getPubKey failed, certObject == null`);
                return;
            }
            let pubKeyObject: cryptoFrameWork.PubKey = (certObject as cert.X509Cert).getPublicKey();
            let pubKeyBlob: cryptoFrameWork.DataBlob = pubKeyObject.getEncoded();
            let keyGenerator: cryptoFrameWork.AsyKeyGenerator = cryptoFrameWork.createAsyKeyGenerator('RSA1024');
            await keyGenerator.convertKey(pubKeyBlob, null).then((keyPair) => {
                Logger.info(TAG, 'get keyPair success.');
                pubKey = keyPair.pubKey;
                callback(pubKey);
            }).catch((err: Error) => {
                Logger.error(TAG, `get keyPair failed, ${JSON.stringify(err)}: ${JSON.stringify(err.message)}`);
            });
            Logger.info(TAG, 'get pubKey success.');
        }
        catch (err) {
            Logger.error(TAG, `get pubKey failed, ${JSON.stringify(err)}`);
        }
    }
    async verify(callback: Function): Promise<void> {
        // get pubkey
        let pubKey: cryptoFrameWork.PubKey | null = null;
        await this.getPubKey((result: cryptoFrameWork.PubKey) => {
            pubKey = result;
        });
        // create verifier
        let verifier: cryptoFrameWork.Verify | null = null;
        try {
            verifier = cryptoFrameWork.createVerify('RSA1024|PKCS1|SHA256');
            Logger.info(TAG, 'create verifier success.');
        }
        catch (err) {
            Logger.error(TAG, `create verifier, ${JSON.stringify(err)}`);
        }
        // verify init
        if (verifier == null) {
            Logger.error(TAG, `verify init failed, verifier == null`);
            return;
        }
        await verifier.init(pubKey).then(() => {
            Logger.info(TAG, 'verify init success.');
        }).catch((err: Error) => {
            Logger.error(TAG, `verify init failed, ${JSON.stringify(err)}: ${JSON.stringify(err.message)}`);
        });
        // verify operation
        await verifier.verify(this.originData, this.signature).then((res) => {
            Logger.info(TAG, 'verify operation success.');
            let result = res;
            callback(result);
        }).catch((err: Error) => {
            Logger.error(TAG, `verify operation failed, ${JSON.stringify(err)}: ${JSON.stringify(err.message)}`);
        });
    }
}
class certEncodingBlob {
    data: Uint8Array = new Uint8Array();
    encodingFormat: number = 0;
}
class callbackData {
    certInfo: string = '';
    originInfo: string = '';
    signatureInfo: string = '';
}
