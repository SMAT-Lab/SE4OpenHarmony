interface MyFamily_Params {
    message?: string;
    array?: Array<teacherEntity>;
}
let __generate__Id: number = 0;
function generateId(): string {
    return "MyFamily_" + ++__generate__Id;
}
class MyFamily extends View {
    constructor(compilerAssignedUniqueChildId, parent, params, localStorage) {
        super(compilerAssignedUniqueChildId, parent, localStorage);
        this.__message = new ObservedPropertySimple('hi', this, "message");
        this.__array = new ObservedPropertyObject([
            { name1: "张三", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "李四", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "王五", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" },
            { name1: "赵六", msg1: "这个老师非常的", name2: "张三", msg2: "这个老师非常的" }
        ]
        /**
         * In low-code mode, do not add anything to the build function, as it will be
         * overwritten by the content generated by the .visual file in the build phase.
         */
        , this, "array");
        this.updateWithValueParams(params);
    }
    updateWithValueParams(params: MyFamily_Params) {
        if (params.message !== undefined) {
            this.message = params.message;
        }
        if (params.array !== undefined) {
            this.array = params.array;
        }
    }
    aboutToBeDeleted() {
        this.__message.aboutToBeDeleted();
        this.__array.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id());
    }
    private __message: ObservedPropertySimple<string>;
    get message() {
        return this.__message.get();
    }
    set message(newValue: string) {
        this.__message.set(newValue);
    }
    private __array: ObservedPropertyObject<Array<teacherEntity>>;
    get array() {
        return this.__array.get();
    }
    set array(newValue: Array<teacherEntity>) {
        this.__array.set(newValue);
    }
    /**
     * In low-code mode, do not add anything to the build function, as it will be
     * overwritten by the content generated by the .visual file in the build phase.
     */
    render() {
    }
}
export class teacherEntity {
    constructor(public name1: string, public name2: string, public msg1: string, public msg2: string) {
        this.name1 = name1;
        this.name2 = name2;
        this.msg1 = msg1;
        this.msg2 = msg2;
    }
}
loadDocument(new MyFamily("1", undefined, {}));
